// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `libusb.h`.
class Libusb {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  Libusb(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int __uint16_identity(
    int __x,
  ) {
    ___uint16_identity ??=
        _dylib.lookupFunction<_c___uint16_identity, _dart___uint16_identity>(
            '__uint16_identity');
    return ___uint16_identity(
      __x,
    );
  }

  _dart___uint16_identity ___uint16_identity;

  int __uint32_identity(
    int __x,
  ) {
    ___uint32_identity ??=
        _dylib.lookupFunction<_c___uint32_identity, _dart___uint32_identity>(
            '__uint32_identity');
    return ___uint32_identity(
      __x,
    );
  }

  _dart___uint32_identity ___uint32_identity;

  int __uint64_identity(
    int __x,
  ) {
    ___uint64_identity ??=
        _dylib.lookupFunction<_c___uint64_identity, _dart___uint64_identity>(
            '__uint64_identity');
    return ___uint64_identity(
      __x,
    );
  }

  _dart___uint64_identity ___uint64_identity;

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    _select ??= _dylib.lookupFunction<_c_select, _dart_select>('select');
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  _dart_select _select;

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    _pselect ??= _dylib.lookupFunction<_c_pselect, _dart_pselect>('pselect');
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  _dart_pselect _pselect;

  int gnu_dev_major(
    int __dev,
  ) {
    _gnu_dev_major ??= _dylib
        .lookupFunction<_c_gnu_dev_major, _dart_gnu_dev_major>('gnu_dev_major');
    return _gnu_dev_major(
      __dev,
    );
  }

  _dart_gnu_dev_major _gnu_dev_major;

  int gnu_dev_minor(
    int __dev,
  ) {
    _gnu_dev_minor ??= _dylib
        .lookupFunction<_c_gnu_dev_minor, _dart_gnu_dev_minor>('gnu_dev_minor');
    return _gnu_dev_minor(
      __dev,
    );
  }

  _dart_gnu_dev_minor _gnu_dev_minor;

  int gnu_dev_makedev(
    int __major,
    int __minor,
  ) {
    _gnu_dev_makedev ??=
        _dylib.lookupFunction<_c_gnu_dev_makedev, _dart_gnu_dev_makedev>(
            'gnu_dev_makedev');
    return _gnu_dev_makedev(
      __major,
      __minor,
    );
  }

  _dart_gnu_dev_makedev _gnu_dev_makedev;

  int gettimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<timezone> __tz,
  ) {
    _gettimeofday ??= _dylib
        .lookupFunction<_c_gettimeofday, _dart_gettimeofday>('gettimeofday');
    return _gettimeofday(
      __tv,
      __tz,
    );
  }

  _dart_gettimeofday _gettimeofday;

  int settimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<timezone> __tz,
  ) {
    _settimeofday ??= _dylib
        .lookupFunction<_c_settimeofday, _dart_settimeofday>('settimeofday');
    return _settimeofday(
      __tv,
      __tz,
    );
  }

  _dart_settimeofday _settimeofday;

  int adjtime(
    ffi.Pointer<timeval> __delta,
    ffi.Pointer<timeval> __olddelta,
  ) {
    _adjtime ??= _dylib.lookupFunction<_c_adjtime, _dart_adjtime>('adjtime');
    return _adjtime(
      __delta,
      __olddelta,
    );
  }

  _dart_adjtime _adjtime;

  int getitimer(
    int __which,
    ffi.Pointer<itimerval> __value,
  ) {
    _getitimer ??=
        _dylib.lookupFunction<_c_getitimer, _dart_getitimer>('getitimer');
    return _getitimer(
      __which,
      __value,
    );
  }

  _dart_getitimer _getitimer;

  int setitimer(
    int __which,
    ffi.Pointer<itimerval> __new,
    ffi.Pointer<itimerval> __old,
  ) {
    _setitimer ??=
        _dylib.lookupFunction<_c_setitimer, _dart_setitimer>('setitimer');
    return _setitimer(
      __which,
      __new,
      __old,
    );
  }

  _dart_setitimer _setitimer;

  int utimes(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    _utimes ??= _dylib.lookupFunction<_c_utimes, _dart_utimes>('utimes');
    return _utimes(
      __file,
      __tvp,
    );
  }

  _dart_utimes _utimes;

  int lutimes(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    _lutimes ??= _dylib.lookupFunction<_c_lutimes, _dart_lutimes>('lutimes');
    return _lutimes(
      __file,
      __tvp,
    );
  }

  _dart_lutimes _lutimes;

  int futimes(
    int __fd,
    ffi.Pointer<timeval> __tvp,
  ) {
    _futimes ??= _dylib.lookupFunction<_c_futimes, _dart_futimes>('futimes');
    return _futimes(
      __fd,
      __tvp,
    );
  }

  _dart_futimes _futimes;

  int clock() {
    _clock ??= _dylib.lookupFunction<_c_clock, _dart_clock>('clock');
    return _clock();
  }

  _dart_clock _clock;

  int time(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    _time ??= _dylib.lookupFunction<_c_time, _dart_time>('time');
    return _time(
      __timer,
    );
  }

  _dart_time _time;

  double difftime(
    int __time1,
    int __time0,
  ) {
    _difftime ??=
        _dylib.lookupFunction<_c_difftime, _dart_difftime>('difftime');
    return _difftime(
      __time1,
      __time0,
    );
  }

  _dart_difftime _difftime;

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    _mktime ??= _dylib.lookupFunction<_c_mktime, _dart_mktime>('mktime');
    return _mktime(
      __tp,
    );
  }

  _dart_mktime _mktime;

  int strftime(
    ffi.Pointer<ffi.Int8> __s,
    int __maxsize,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<tm> __tp,
  ) {
    _strftime ??=
        _dylib.lookupFunction<_c_strftime, _dart_strftime>('strftime');
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  _dart_strftime _strftime;

  int strftime_l(
    ffi.Pointer<ffi.Int8> __s,
    int __maxsize,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<tm> __tp,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    _strftime_l ??=
        _dylib.lookupFunction<_c_strftime_l, _dart_strftime_l>('strftime_l');
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  _dart_strftime_l _strftime_l;

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    _gmtime ??= _dylib.lookupFunction<_c_gmtime, _dart_gmtime>('gmtime');
    return _gmtime(
      __timer,
    );
  }

  _dart_gmtime _gmtime;

  ffi.Pointer<tm> localtime(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    _localtime ??=
        _dylib.lookupFunction<_c_localtime, _dart_localtime>('localtime');
    return _localtime(
      __timer,
    );
  }

  _dart_localtime _localtime;

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<ffi.Int64> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    _gmtime_r ??=
        _dylib.lookupFunction<_c_gmtime_r, _dart_gmtime_r>('gmtime_r');
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  _dart_gmtime_r _gmtime_r;

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<ffi.Int64> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    _localtime_r ??=
        _dylib.lookupFunction<_c_localtime_r, _dart_localtime_r>('localtime_r');
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  _dart_localtime_r _localtime_r;

  ffi.Pointer<ffi.Int8> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    _asctime ??= _dylib.lookupFunction<_c_asctime, _dart_asctime>('asctime');
    return _asctime(
      __tp,
    );
  }

  _dart_asctime _asctime;

  ffi.Pointer<ffi.Int8> ctime(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    _ctime ??= _dylib.lookupFunction<_c_ctime, _dart_ctime>('ctime');
    return _ctime(
      __timer,
    );
  }

  _dart_ctime _ctime;

  ffi.Pointer<ffi.Int8> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _asctime_r ??=
        _dylib.lookupFunction<_c_asctime_r, _dart_asctime_r>('asctime_r');
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  _dart_asctime_r _asctime_r;

  ffi.Pointer<ffi.Int8> ctime_r(
    ffi.Pointer<ffi.Int64> __timer,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _ctime_r ??= _dylib.lookupFunction<_c_ctime_r, _dart_ctime_r>('ctime_r');
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  _dart_ctime_r _ctime_r;

  void tzset() {
    _tzset ??= _dylib.lookupFunction<_c_tzset, _dart_tzset>('tzset');
    return _tzset();
  }

  _dart_tzset _tzset;

  int stime(
    ffi.Pointer<ffi.Int64> __when,
  ) {
    _stime ??= _dylib.lookupFunction<_c_stime, _dart_stime>('stime');
    return _stime(
      __when,
    );
  }

  _dart_stime _stime;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    _timegm ??= _dylib.lookupFunction<_c_timegm, _dart_timegm>('timegm');
    return _timegm(
      __tp,
    );
  }

  _dart_timegm _timegm;

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    _timelocal ??=
        _dylib.lookupFunction<_c_timelocal, _dart_timelocal>('timelocal');
    return _timelocal(
      __tp,
    );
  }

  _dart_timelocal _timelocal;

  int dysize(
    int __year,
  ) {
    _dysize ??= _dylib.lookupFunction<_c_dysize, _dart_dysize>('dysize');
    return _dysize(
      __year,
    );
  }

  _dart_dysize _dysize;

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    _nanosleep ??=
        _dylib.lookupFunction<_c_nanosleep, _dart_nanosleep>('nanosleep');
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  _dart_nanosleep _nanosleep;

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    _clock_getres ??= _dylib
        .lookupFunction<_c_clock_getres, _dart_clock_getres>('clock_getres');
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  _dart_clock_getres _clock_getres;

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    _clock_gettime ??= _dylib
        .lookupFunction<_c_clock_gettime, _dart_clock_gettime>('clock_gettime');
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  _dart_clock_gettime _clock_gettime;

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    _clock_settime ??= _dylib
        .lookupFunction<_c_clock_settime, _dart_clock_settime>('clock_settime');
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  _dart_clock_settime _clock_settime;

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    _clock_nanosleep ??=
        _dylib.lookupFunction<_c_clock_nanosleep, _dart_clock_nanosleep>(
            'clock_nanosleep');
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  _dart_clock_nanosleep _clock_nanosleep;

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<ffi.Int32> __clock_id,
  ) {
    _clock_getcpuclockid ??= _dylib.lookupFunction<_c_clock_getcpuclockid,
        _dart_clock_getcpuclockid>('clock_getcpuclockid');
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  _dart_clock_getcpuclockid _clock_getcpuclockid;

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __timerid,
  ) {
    _timer_create ??= _dylib
        .lookupFunction<_c_timer_create, _dart_timer_create>('timer_create');
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  _dart_timer_create _timer_create;

  int timer_delete(
    ffi.Pointer<ffi.Void> __timerid,
  ) {
    _timer_delete ??= _dylib
        .lookupFunction<_c_timer_delete, _dart_timer_delete>('timer_delete');
    return _timer_delete(
      __timerid,
    );
  }

  _dart_timer_delete _timer_delete;

  int timer_settime(
    ffi.Pointer<ffi.Void> __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    _timer_settime ??= _dylib
        .lookupFunction<_c_timer_settime, _dart_timer_settime>('timer_settime');
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  _dart_timer_settime _timer_settime;

  int timer_gettime(
    ffi.Pointer<ffi.Void> __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    _timer_gettime ??= _dylib
        .lookupFunction<_c_timer_gettime, _dart_timer_gettime>('timer_gettime');
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  _dart_timer_gettime _timer_gettime;

  int timer_getoverrun(
    ffi.Pointer<ffi.Void> __timerid,
  ) {
    _timer_getoverrun ??=
        _dylib.lookupFunction<_c_timer_getoverrun, _dart_timer_getoverrun>(
            'timer_getoverrun');
    return _timer_getoverrun(
      __timerid,
    );
  }

  _dart_timer_getoverrun _timer_getoverrun;

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    _timespec_get ??= _dylib
        .lookupFunction<_c_timespec_get, _dart_timespec_get>('timespec_get');
    return _timespec_get(
      __ts,
      __base,
    );
  }

  _dart_timespec_get _timespec_get;

  /// \ingroup libusb_misc
  /// Convert a 16-bit value from host-endian to little-endian format. On
  /// little endian systems, this function does nothing. On big endian systems,
  /// the bytes are swapped.
  /// \param x the host-endian value to convert
  /// \returns the value in little-endian byte order
  int libusb_cpu_to_le16(
    int x,
  ) {
    _libusb_cpu_to_le16 ??=
        _dylib.lookupFunction<_c_libusb_cpu_to_le16, _dart_libusb_cpu_to_le16>(
            'libusb_cpu_to_le16');
    return _libusb_cpu_to_le16(
      x,
    );
  }

  _dart_libusb_cpu_to_le16 _libusb_cpu_to_le16;

  int libusb_init(
    ffi.Pointer<ffi.Pointer<libusb_context>> ctx,
  ) {
    _libusb_init ??=
        _dylib.lookupFunction<_c_libusb_init, _dart_libusb_init>('libusb_init');
    return _libusb_init(
      ctx,
    );
  }

  _dart_libusb_init _libusb_init;

  void libusb_exit(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_exit ??=
        _dylib.lookupFunction<_c_libusb_exit, _dart_libusb_exit>('libusb_exit');
    return _libusb_exit(
      ctx,
    );
  }

  _dart_libusb_exit _libusb_exit;

  void libusb_set_debug(
    ffi.Pointer<libusb_context> ctx,
    int level,
  ) {
    _libusb_set_debug ??=
        _dylib.lookupFunction<_c_libusb_set_debug, _dart_libusb_set_debug>(
            'libusb_set_debug');
    return _libusb_set_debug(
      ctx,
      level,
    );
  }

  _dart_libusb_set_debug _libusb_set_debug;

  ffi.Pointer<libusb_version> libusb_get_version() {
    _libusb_get_version ??=
        _dylib.lookupFunction<_c_libusb_get_version, _dart_libusb_get_version>(
            'libusb_get_version');
    return _libusb_get_version();
  }

  _dart_libusb_get_version _libusb_get_version;

  int libusb_has_capability(
    int capability,
  ) {
    _libusb_has_capability ??= _dylib.lookupFunction<_c_libusb_has_capability,
        _dart_libusb_has_capability>('libusb_has_capability');
    return _libusb_has_capability(
      capability,
    );
  }

  _dart_libusb_has_capability _libusb_has_capability;

  ffi.Pointer<ffi.Int8> libusb_error_name(
    int errcode,
  ) {
    _libusb_error_name ??=
        _dylib.lookupFunction<_c_libusb_error_name, _dart_libusb_error_name>(
            'libusb_error_name');
    return _libusb_error_name(
      errcode,
    );
  }

  _dart_libusb_error_name _libusb_error_name;

  int libusb_setlocale(
    ffi.Pointer<ffi.Int8> locale,
  ) {
    _libusb_setlocale ??=
        _dylib.lookupFunction<_c_libusb_setlocale, _dart_libusb_setlocale>(
            'libusb_setlocale');
    return _libusb_setlocale(
      locale,
    );
  }

  _dart_libusb_setlocale _libusb_setlocale;

  ffi.Pointer<ffi.Int8> libusb_strerror(
    int errcode,
  ) {
    _libusb_strerror ??=
        _dylib.lookupFunction<_c_libusb_strerror, _dart_libusb_strerror>(
            'libusb_strerror');
    return _libusb_strerror(
      errcode,
    );
  }

  _dart_libusb_strerror _libusb_strerror;

  int libusb_get_device_list(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<libusb_device>>> list,
  ) {
    _libusb_get_device_list ??= _dylib.lookupFunction<_c_libusb_get_device_list,
        _dart_libusb_get_device_list>('libusb_get_device_list');
    return _libusb_get_device_list(
      ctx,
      list,
    );
  }

  _dart_libusb_get_device_list _libusb_get_device_list;

  void libusb_free_device_list(
    ffi.Pointer<ffi.Pointer<libusb_device>> list,
    int unref_devices,
  ) {
    _libusb_free_device_list ??= _dylib.lookupFunction<
        _c_libusb_free_device_list,
        _dart_libusb_free_device_list>('libusb_free_device_list');
    return _libusb_free_device_list(
      list,
      unref_devices,
    );
  }

  _dart_libusb_free_device_list _libusb_free_device_list;

  ffi.Pointer<libusb_device> libusb_ref_device(
    ffi.Pointer<libusb_device> dev,
  ) {
    _libusb_ref_device ??=
        _dylib.lookupFunction<_c_libusb_ref_device, _dart_libusb_ref_device>(
            'libusb_ref_device');
    return _libusb_ref_device(
      dev,
    );
  }

  _dart_libusb_ref_device _libusb_ref_device;

  void libusb_unref_device(
    ffi.Pointer<libusb_device> dev,
  ) {
    _libusb_unref_device ??= _dylib.lookupFunction<_c_libusb_unref_device,
        _dart_libusb_unref_device>('libusb_unref_device');
    return _libusb_unref_device(
      dev,
    );
  }

  _dart_libusb_unref_device _libusb_unref_device;

  int libusb_get_configuration(
    ffi.Pointer<libusb_device_handle> dev,
    ffi.Pointer<ffi.Int32> config,
  ) {
    _libusb_get_configuration ??= _dylib.lookupFunction<
        _c_libusb_get_configuration,
        _dart_libusb_get_configuration>('libusb_get_configuration');
    return _libusb_get_configuration(
      dev,
      config,
    );
  }

  _dart_libusb_get_configuration _libusb_get_configuration;

  int libusb_get_device_descriptor(
    ffi.Pointer<libusb_device> dev,
    ffi.Pointer<libusb_device_descriptor> desc,
  ) {
    _libusb_get_device_descriptor ??= _dylib.lookupFunction<
        _c_libusb_get_device_descriptor,
        _dart_libusb_get_device_descriptor>('libusb_get_device_descriptor');
    return _libusb_get_device_descriptor(
      dev,
      desc,
    );
  }

  _dart_libusb_get_device_descriptor _libusb_get_device_descriptor;

  int libusb_get_active_config_descriptor(
    ffi.Pointer<libusb_device> dev,
    ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
  ) {
    _libusb_get_active_config_descriptor ??= _dylib.lookupFunction<
            _c_libusb_get_active_config_descriptor,
            _dart_libusb_get_active_config_descriptor>(
        'libusb_get_active_config_descriptor');
    return _libusb_get_active_config_descriptor(
      dev,
      config,
    );
  }

  _dart_libusb_get_active_config_descriptor
      _libusb_get_active_config_descriptor;

  int libusb_get_config_descriptor(
    ffi.Pointer<libusb_device> dev,
    int config_index,
    ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
  ) {
    _libusb_get_config_descriptor ??= _dylib.lookupFunction<
        _c_libusb_get_config_descriptor,
        _dart_libusb_get_config_descriptor>('libusb_get_config_descriptor');
    return _libusb_get_config_descriptor(
      dev,
      config_index,
      config,
    );
  }

  _dart_libusb_get_config_descriptor _libusb_get_config_descriptor;

  int libusb_get_config_descriptor_by_value(
    ffi.Pointer<libusb_device> dev,
    int bConfigurationValue,
    ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
  ) {
    _libusb_get_config_descriptor_by_value ??= _dylib.lookupFunction<
            _c_libusb_get_config_descriptor_by_value,
            _dart_libusb_get_config_descriptor_by_value>(
        'libusb_get_config_descriptor_by_value');
    return _libusb_get_config_descriptor_by_value(
      dev,
      bConfigurationValue,
      config,
    );
  }

  _dart_libusb_get_config_descriptor_by_value
      _libusb_get_config_descriptor_by_value;

  void libusb_free_config_descriptor(
    ffi.Pointer<libusb_config_descriptor> config,
  ) {
    _libusb_free_config_descriptor ??= _dylib.lookupFunction<
        _c_libusb_free_config_descriptor,
        _dart_libusb_free_config_descriptor>('libusb_free_config_descriptor');
    return _libusb_free_config_descriptor(
      config,
    );
  }

  _dart_libusb_free_config_descriptor _libusb_free_config_descriptor;

  int libusb_get_ss_endpoint_companion_descriptor(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<libusb_endpoint_descriptor> endpoint,
    ffi.Pointer<ffi.Pointer<libusb_ss_endpoint_companion_descriptor>> ep_comp,
  ) {
    _libusb_get_ss_endpoint_companion_descriptor ??= _dylib.lookupFunction<
            _c_libusb_get_ss_endpoint_companion_descriptor,
            _dart_libusb_get_ss_endpoint_companion_descriptor>(
        'libusb_get_ss_endpoint_companion_descriptor');
    return _libusb_get_ss_endpoint_companion_descriptor(
      ctx,
      endpoint,
      ep_comp,
    );
  }

  _dart_libusb_get_ss_endpoint_companion_descriptor
      _libusb_get_ss_endpoint_companion_descriptor;

  void libusb_free_ss_endpoint_companion_descriptor(
    ffi.Pointer<libusb_ss_endpoint_companion_descriptor> ep_comp,
  ) {
    _libusb_free_ss_endpoint_companion_descriptor ??= _dylib.lookupFunction<
            _c_libusb_free_ss_endpoint_companion_descriptor,
            _dart_libusb_free_ss_endpoint_companion_descriptor>(
        'libusb_free_ss_endpoint_companion_descriptor');
    return _libusb_free_ss_endpoint_companion_descriptor(
      ep_comp,
    );
  }

  _dart_libusb_free_ss_endpoint_companion_descriptor
      _libusb_free_ss_endpoint_companion_descriptor;

  int libusb_get_bos_descriptor(
    ffi.Pointer<libusb_device_handle> dev_handle,
    ffi.Pointer<ffi.Pointer<libusb_bos_descriptor>> bos,
  ) {
    _libusb_get_bos_descriptor ??= _dylib.lookupFunction<
        _c_libusb_get_bos_descriptor,
        _dart_libusb_get_bos_descriptor>('libusb_get_bos_descriptor');
    return _libusb_get_bos_descriptor(
      dev_handle,
      bos,
    );
  }

  _dart_libusb_get_bos_descriptor _libusb_get_bos_descriptor;

  void libusb_free_bos_descriptor(
    ffi.Pointer<libusb_bos_descriptor> bos,
  ) {
    _libusb_free_bos_descriptor ??= _dylib.lookupFunction<
        _c_libusb_free_bos_descriptor,
        _dart_libusb_free_bos_descriptor>('libusb_free_bos_descriptor');
    return _libusb_free_bos_descriptor(
      bos,
    );
  }

  _dart_libusb_free_bos_descriptor _libusb_free_bos_descriptor;

  int libusb_get_usb_2_0_extension_descriptor(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
    ffi.Pointer<ffi.Pointer<libusb_usb_2_0_extension_descriptor>>
        usb_2_0_extension,
  ) {
    _libusb_get_usb_2_0_extension_descriptor ??= _dylib.lookupFunction<
            _c_libusb_get_usb_2_0_extension_descriptor,
            _dart_libusb_get_usb_2_0_extension_descriptor>(
        'libusb_get_usb_2_0_extension_descriptor');
    return _libusb_get_usb_2_0_extension_descriptor(
      ctx,
      dev_cap,
      usb_2_0_extension,
    );
  }

  _dart_libusb_get_usb_2_0_extension_descriptor
      _libusb_get_usb_2_0_extension_descriptor;

  void libusb_free_usb_2_0_extension_descriptor(
    ffi.Pointer<libusb_usb_2_0_extension_descriptor> usb_2_0_extension,
  ) {
    _libusb_free_usb_2_0_extension_descriptor ??= _dylib.lookupFunction<
            _c_libusb_free_usb_2_0_extension_descriptor,
            _dart_libusb_free_usb_2_0_extension_descriptor>(
        'libusb_free_usb_2_0_extension_descriptor');
    return _libusb_free_usb_2_0_extension_descriptor(
      usb_2_0_extension,
    );
  }

  _dart_libusb_free_usb_2_0_extension_descriptor
      _libusb_free_usb_2_0_extension_descriptor;

  int libusb_get_ss_usb_device_capability_descriptor(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
    ffi.Pointer<ffi.Pointer<libusb_ss_usb_device_capability_descriptor>>
        ss_usb_device_cap,
  ) {
    _libusb_get_ss_usb_device_capability_descriptor ??= _dylib.lookupFunction<
            _c_libusb_get_ss_usb_device_capability_descriptor,
            _dart_libusb_get_ss_usb_device_capability_descriptor>(
        'libusb_get_ss_usb_device_capability_descriptor');
    return _libusb_get_ss_usb_device_capability_descriptor(
      ctx,
      dev_cap,
      ss_usb_device_cap,
    );
  }

  _dart_libusb_get_ss_usb_device_capability_descriptor
      _libusb_get_ss_usb_device_capability_descriptor;

  void libusb_free_ss_usb_device_capability_descriptor(
    ffi.Pointer<libusb_ss_usb_device_capability_descriptor> ss_usb_device_cap,
  ) {
    _libusb_free_ss_usb_device_capability_descriptor ??= _dylib.lookupFunction<
            _c_libusb_free_ss_usb_device_capability_descriptor,
            _dart_libusb_free_ss_usb_device_capability_descriptor>(
        'libusb_free_ss_usb_device_capability_descriptor');
    return _libusb_free_ss_usb_device_capability_descriptor(
      ss_usb_device_cap,
    );
  }

  _dart_libusb_free_ss_usb_device_capability_descriptor
      _libusb_free_ss_usb_device_capability_descriptor;

  int libusb_get_container_id_descriptor(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
    ffi.Pointer<ffi.Pointer<libusb_container_id_descriptor>> container_id,
  ) {
    _libusb_get_container_id_descriptor ??= _dylib.lookupFunction<
            _c_libusb_get_container_id_descriptor,
            _dart_libusb_get_container_id_descriptor>(
        'libusb_get_container_id_descriptor');
    return _libusb_get_container_id_descriptor(
      ctx,
      dev_cap,
      container_id,
    );
  }

  _dart_libusb_get_container_id_descriptor _libusb_get_container_id_descriptor;

  void libusb_free_container_id_descriptor(
    ffi.Pointer<libusb_container_id_descriptor> container_id,
  ) {
    _libusb_free_container_id_descriptor ??= _dylib.lookupFunction<
            _c_libusb_free_container_id_descriptor,
            _dart_libusb_free_container_id_descriptor>(
        'libusb_free_container_id_descriptor');
    return _libusb_free_container_id_descriptor(
      container_id,
    );
  }

  _dart_libusb_free_container_id_descriptor
      _libusb_free_container_id_descriptor;

  int libusb_get_bus_number(
    ffi.Pointer<libusb_device> dev,
  ) {
    _libusb_get_bus_number ??= _dylib.lookupFunction<_c_libusb_get_bus_number,
        _dart_libusb_get_bus_number>('libusb_get_bus_number');
    return _libusb_get_bus_number(
      dev,
    );
  }

  _dart_libusb_get_bus_number _libusb_get_bus_number;

  int libusb_get_port_number(
    ffi.Pointer<libusb_device> dev,
  ) {
    _libusb_get_port_number ??= _dylib.lookupFunction<_c_libusb_get_port_number,
        _dart_libusb_get_port_number>('libusb_get_port_number');
    return _libusb_get_port_number(
      dev,
    );
  }

  _dart_libusb_get_port_number _libusb_get_port_number;

  int libusb_get_port_numbers(
    ffi.Pointer<libusb_device> dev,
    ffi.Pointer<ffi.Uint8> port_numbers,
    int port_numbers_len,
  ) {
    _libusb_get_port_numbers ??= _dylib.lookupFunction<
        _c_libusb_get_port_numbers,
        _dart_libusb_get_port_numbers>('libusb_get_port_numbers');
    return _libusb_get_port_numbers(
      dev,
      port_numbers,
      port_numbers_len,
    );
  }

  _dart_libusb_get_port_numbers _libusb_get_port_numbers;

  int libusb_get_port_path(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<libusb_device> dev,
    ffi.Pointer<ffi.Uint8> path,
    int path_length,
  ) {
    _libusb_get_port_path ??= _dylib.lookupFunction<_c_libusb_get_port_path,
        _dart_libusb_get_port_path>('libusb_get_port_path');
    return _libusb_get_port_path(
      ctx,
      dev,
      path,
      path_length,
    );
  }

  _dart_libusb_get_port_path _libusb_get_port_path;

  ffi.Pointer<libusb_device> libusb_get_parent(
    ffi.Pointer<libusb_device> dev,
  ) {
    _libusb_get_parent ??=
        _dylib.lookupFunction<_c_libusb_get_parent, _dart_libusb_get_parent>(
            'libusb_get_parent');
    return _libusb_get_parent(
      dev,
    );
  }

  _dart_libusb_get_parent _libusb_get_parent;

  int libusb_get_device_address(
    ffi.Pointer<libusb_device> dev,
  ) {
    _libusb_get_device_address ??= _dylib.lookupFunction<
        _c_libusb_get_device_address,
        _dart_libusb_get_device_address>('libusb_get_device_address');
    return _libusb_get_device_address(
      dev,
    );
  }

  _dart_libusb_get_device_address _libusb_get_device_address;

  int libusb_get_device_speed(
    ffi.Pointer<libusb_device> dev,
  ) {
    _libusb_get_device_speed ??= _dylib.lookupFunction<
        _c_libusb_get_device_speed,
        _dart_libusb_get_device_speed>('libusb_get_device_speed');
    return _libusb_get_device_speed(
      dev,
    );
  }

  _dart_libusb_get_device_speed _libusb_get_device_speed;

  int libusb_get_max_packet_size(
    ffi.Pointer<libusb_device> dev,
    int endpoint,
  ) {
    _libusb_get_max_packet_size ??= _dylib.lookupFunction<
        _c_libusb_get_max_packet_size,
        _dart_libusb_get_max_packet_size>('libusb_get_max_packet_size');
    return _libusb_get_max_packet_size(
      dev,
      endpoint,
    );
  }

  _dart_libusb_get_max_packet_size _libusb_get_max_packet_size;

  int libusb_get_max_iso_packet_size(
    ffi.Pointer<libusb_device> dev,
    int endpoint,
  ) {
    _libusb_get_max_iso_packet_size ??= _dylib.lookupFunction<
        _c_libusb_get_max_iso_packet_size,
        _dart_libusb_get_max_iso_packet_size>('libusb_get_max_iso_packet_size');
    return _libusb_get_max_iso_packet_size(
      dev,
      endpoint,
    );
  }

  _dart_libusb_get_max_iso_packet_size _libusb_get_max_iso_packet_size;

  int libusb_open(
    ffi.Pointer<libusb_device> dev,
    ffi.Pointer<ffi.Pointer<libusb_device_handle>> dev_handle,
  ) {
    _libusb_open ??=
        _dylib.lookupFunction<_c_libusb_open, _dart_libusb_open>('libusb_open');
    return _libusb_open(
      dev,
      dev_handle,
    );
  }

  _dart_libusb_open _libusb_open;

  void libusb_close(
    ffi.Pointer<libusb_device_handle> dev_handle,
  ) {
    _libusb_close ??= _dylib
        .lookupFunction<_c_libusb_close, _dart_libusb_close>('libusb_close');
    return _libusb_close(
      dev_handle,
    );
  }

  _dart_libusb_close _libusb_close;

  ffi.Pointer<libusb_device> libusb_get_device(
    ffi.Pointer<libusb_device_handle> dev_handle,
  ) {
    _libusb_get_device ??=
        _dylib.lookupFunction<_c_libusb_get_device, _dart_libusb_get_device>(
            'libusb_get_device');
    return _libusb_get_device(
      dev_handle,
    );
  }

  _dart_libusb_get_device _libusb_get_device;

  int libusb_set_configuration(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int configuration,
  ) {
    _libusb_set_configuration ??= _dylib.lookupFunction<
        _c_libusb_set_configuration,
        _dart_libusb_set_configuration>('libusb_set_configuration');
    return _libusb_set_configuration(
      dev_handle,
      configuration,
    );
  }

  _dart_libusb_set_configuration _libusb_set_configuration;

  int libusb_claim_interface(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
  ) {
    _libusb_claim_interface ??= _dylib.lookupFunction<_c_libusb_claim_interface,
        _dart_libusb_claim_interface>('libusb_claim_interface');
    return _libusb_claim_interface(
      dev_handle,
      interface_number,
    );
  }

  _dart_libusb_claim_interface _libusb_claim_interface;

  int libusb_release_interface(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
  ) {
    _libusb_release_interface ??= _dylib.lookupFunction<
        _c_libusb_release_interface,
        _dart_libusb_release_interface>('libusb_release_interface');
    return _libusb_release_interface(
      dev_handle,
      interface_number,
    );
  }

  _dart_libusb_release_interface _libusb_release_interface;

  ffi.Pointer<libusb_device_handle> libusb_open_device_with_vid_pid(
    ffi.Pointer<libusb_context> ctx,
    int vendor_id,
    int product_id,
  ) {
    _libusb_open_device_with_vid_pid ??= _dylib.lookupFunction<
            _c_libusb_open_device_with_vid_pid,
            _dart_libusb_open_device_with_vid_pid>(
        'libusb_open_device_with_vid_pid');
    return _libusb_open_device_with_vid_pid(
      ctx,
      vendor_id,
      product_id,
    );
  }

  _dart_libusb_open_device_with_vid_pid _libusb_open_device_with_vid_pid;

  int libusb_set_interface_alt_setting(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
    int alternate_setting,
  ) {
    _libusb_set_interface_alt_setting ??= _dylib.lookupFunction<
            _c_libusb_set_interface_alt_setting,
            _dart_libusb_set_interface_alt_setting>(
        'libusb_set_interface_alt_setting');
    return _libusb_set_interface_alt_setting(
      dev_handle,
      interface_number,
      alternate_setting,
    );
  }

  _dart_libusb_set_interface_alt_setting _libusb_set_interface_alt_setting;

  int libusb_clear_halt(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int endpoint,
  ) {
    _libusb_clear_halt ??=
        _dylib.lookupFunction<_c_libusb_clear_halt, _dart_libusb_clear_halt>(
            'libusb_clear_halt');
    return _libusb_clear_halt(
      dev_handle,
      endpoint,
    );
  }

  _dart_libusb_clear_halt _libusb_clear_halt;

  int libusb_reset_device(
    ffi.Pointer<libusb_device_handle> dev_handle,
  ) {
    _libusb_reset_device ??= _dylib.lookupFunction<_c_libusb_reset_device,
        _dart_libusb_reset_device>('libusb_reset_device');
    return _libusb_reset_device(
      dev_handle,
    );
  }

  _dart_libusb_reset_device _libusb_reset_device;

  int libusb_alloc_streams(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int num_streams,
    ffi.Pointer<ffi.Uint8> endpoints,
    int num_endpoints,
  ) {
    _libusb_alloc_streams ??= _dylib.lookupFunction<_c_libusb_alloc_streams,
        _dart_libusb_alloc_streams>('libusb_alloc_streams');
    return _libusb_alloc_streams(
      dev_handle,
      num_streams,
      endpoints,
      num_endpoints,
    );
  }

  _dart_libusb_alloc_streams _libusb_alloc_streams;

  int libusb_free_streams(
    ffi.Pointer<libusb_device_handle> dev_handle,
    ffi.Pointer<ffi.Uint8> endpoints,
    int num_endpoints,
  ) {
    _libusb_free_streams ??= _dylib.lookupFunction<_c_libusb_free_streams,
        _dart_libusb_free_streams>('libusb_free_streams');
    return _libusb_free_streams(
      dev_handle,
      endpoints,
      num_endpoints,
    );
  }

  _dart_libusb_free_streams _libusb_free_streams;

  ffi.Pointer<ffi.Uint8> libusb_dev_mem_alloc(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int length,
  ) {
    _libusb_dev_mem_alloc ??= _dylib.lookupFunction<_c_libusb_dev_mem_alloc,
        _dart_libusb_dev_mem_alloc>('libusb_dev_mem_alloc');
    return _libusb_dev_mem_alloc(
      dev_handle,
      length,
    );
  }

  _dart_libusb_dev_mem_alloc _libusb_dev_mem_alloc;

  int libusb_dev_mem_free(
    ffi.Pointer<libusb_device_handle> dev_handle,
    ffi.Pointer<ffi.Uint8> buffer,
    int length,
  ) {
    _libusb_dev_mem_free ??= _dylib.lookupFunction<_c_libusb_dev_mem_free,
        _dart_libusb_dev_mem_free>('libusb_dev_mem_free');
    return _libusb_dev_mem_free(
      dev_handle,
      buffer,
      length,
    );
  }

  _dart_libusb_dev_mem_free _libusb_dev_mem_free;

  int libusb_kernel_driver_active(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
  ) {
    _libusb_kernel_driver_active ??= _dylib.lookupFunction<
        _c_libusb_kernel_driver_active,
        _dart_libusb_kernel_driver_active>('libusb_kernel_driver_active');
    return _libusb_kernel_driver_active(
      dev_handle,
      interface_number,
    );
  }

  _dart_libusb_kernel_driver_active _libusb_kernel_driver_active;

  int libusb_detach_kernel_driver(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
  ) {
    _libusb_detach_kernel_driver ??= _dylib.lookupFunction<
        _c_libusb_detach_kernel_driver,
        _dart_libusb_detach_kernel_driver>('libusb_detach_kernel_driver');
    return _libusb_detach_kernel_driver(
      dev_handle,
      interface_number,
    );
  }

  _dart_libusb_detach_kernel_driver _libusb_detach_kernel_driver;

  int libusb_attach_kernel_driver(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int interface_number,
  ) {
    _libusb_attach_kernel_driver ??= _dylib.lookupFunction<
        _c_libusb_attach_kernel_driver,
        _dart_libusb_attach_kernel_driver>('libusb_attach_kernel_driver');
    return _libusb_attach_kernel_driver(
      dev_handle,
      interface_number,
    );
  }

  _dart_libusb_attach_kernel_driver _libusb_attach_kernel_driver;

  int libusb_set_auto_detach_kernel_driver(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int enable,
  ) {
    _libusb_set_auto_detach_kernel_driver ??= _dylib.lookupFunction<
            _c_libusb_set_auto_detach_kernel_driver,
            _dart_libusb_set_auto_detach_kernel_driver>(
        'libusb_set_auto_detach_kernel_driver');
    return _libusb_set_auto_detach_kernel_driver(
      dev_handle,
      enable,
    );
  }

  _dart_libusb_set_auto_detach_kernel_driver
      _libusb_set_auto_detach_kernel_driver;

  /// \ingroup libusb_asyncio
  /// Get the data section of a control transfer. This convenience function is here
  /// to remind you that the data does not start until 8 bytes into the actual
  /// buffer, as the setup packet comes first.
  ///
  /// Calling this function only makes sense from a transfer callback function,
  /// or situations where you have already allocated a suitably sized buffer at
  /// transfer->buffer.
  ///
  /// \param transfer a transfer
  /// \returns pointer to the first byte of the data section
  ffi.Pointer<ffi.Uint8> libusb_control_transfer_get_data(
    ffi.Pointer<libusb_transfer> transfer,
  ) {
    _libusb_control_transfer_get_data ??= _dylib.lookupFunction<
            _c_libusb_control_transfer_get_data,
            _dart_libusb_control_transfer_get_data>(
        'libusb_control_transfer_get_data');
    return _libusb_control_transfer_get_data(
      transfer,
    );
  }

  _dart_libusb_control_transfer_get_data _libusb_control_transfer_get_data;

  /// \ingroup libusb_asyncio
  /// Get the control setup packet of a control transfer. This convenience
  /// function is here to remind you that the control setup occupies the first
  /// 8 bytes of the transfer data buffer.
  ///
  /// Calling this function only makes sense from a transfer callback function,
  /// or situations where you have already allocated a suitably sized buffer at
  /// transfer->buffer.
  ///
  /// \param transfer a transfer
  /// \returns a casted pointer to the start of the transfer data buffer
  ffi.Pointer<libusb_control_setup> libusb_control_transfer_get_setup(
    ffi.Pointer<libusb_transfer> transfer,
  ) {
    _libusb_control_transfer_get_setup ??= _dylib.lookupFunction<
            _c_libusb_control_transfer_get_setup,
            _dart_libusb_control_transfer_get_setup>(
        'libusb_control_transfer_get_setup');
    return _libusb_control_transfer_get_setup(
      transfer,
    );
  }

  _dart_libusb_control_transfer_get_setup _libusb_control_transfer_get_setup;

  /// \ingroup libusb_asyncio
  /// Helper function to populate the setup packet (first 8 bytes of the data
  /// buffer) for a control transfer. The wIndex, wValue and wLength values should
  /// be given in host-endian byte order.
  ///
  /// \param buffer buffer to output the setup packet into
  /// This pointer must be aligned to at least 2 bytes boundary.
  /// \param bmRequestType see the
  /// \ref libusb_control_setup::bmRequestType "bmRequestType" field of
  /// \ref libusb_control_setup
  /// \param bRequest see the
  /// \ref libusb_control_setup::bRequest "bRequest" field of
  /// \ref libusb_control_setup
  /// \param wValue see the
  /// \ref libusb_control_setup::wValue "wValue" field of
  /// \ref libusb_control_setup
  /// \param wIndex see the
  /// \ref libusb_control_setup::wIndex "wIndex" field of
  /// \ref libusb_control_setup
  /// \param wLength see the
  /// \ref libusb_control_setup::wLength "wLength" field of
  /// \ref libusb_control_setup
  void libusb_fill_control_setup(
    ffi.Pointer<ffi.Uint8> buffer,
    int bmRequestType,
    int bRequest,
    int wValue,
    int wIndex,
    int wLength,
  ) {
    _libusb_fill_control_setup ??= _dylib.lookupFunction<
        _c_libusb_fill_control_setup,
        _dart_libusb_fill_control_setup>('libusb_fill_control_setup');
    return _libusb_fill_control_setup(
      buffer,
      bmRequestType,
      bRequest,
      wValue,
      wIndex,
      wLength,
    );
  }

  _dart_libusb_fill_control_setup _libusb_fill_control_setup;

  ffi.Pointer<libusb_transfer> libusb_alloc_transfer(
    int iso_packets,
  ) {
    _libusb_alloc_transfer ??= _dylib.lookupFunction<_c_libusb_alloc_transfer,
        _dart_libusb_alloc_transfer>('libusb_alloc_transfer');
    return _libusb_alloc_transfer(
      iso_packets,
    );
  }

  _dart_libusb_alloc_transfer _libusb_alloc_transfer;

  int libusb_submit_transfer(
    ffi.Pointer<libusb_transfer> transfer,
  ) {
    _libusb_submit_transfer ??= _dylib.lookupFunction<_c_libusb_submit_transfer,
        _dart_libusb_submit_transfer>('libusb_submit_transfer');
    return _libusb_submit_transfer(
      transfer,
    );
  }

  _dart_libusb_submit_transfer _libusb_submit_transfer;

  int libusb_cancel_transfer(
    ffi.Pointer<libusb_transfer> transfer,
  ) {
    _libusb_cancel_transfer ??= _dylib.lookupFunction<_c_libusb_cancel_transfer,
        _dart_libusb_cancel_transfer>('libusb_cancel_transfer');
    return _libusb_cancel_transfer(
      transfer,
    );
  }

  _dart_libusb_cancel_transfer _libusb_cancel_transfer;

  void libusb_free_transfer(
    ffi.Pointer<libusb_transfer> transfer,
  ) {
    _libusb_free_transfer ??= _dylib.lookupFunction<_c_libusb_free_transfer,
        _dart_libusb_free_transfer>('libusb_free_transfer');
    return _libusb_free_transfer(
      transfer,
    );
  }

  _dart_libusb_free_transfer _libusb_free_transfer;

  void libusb_transfer_set_stream_id(
    ffi.Pointer<libusb_transfer> transfer,
    int stream_id,
  ) {
    _libusb_transfer_set_stream_id ??= _dylib.lookupFunction<
        _c_libusb_transfer_set_stream_id,
        _dart_libusb_transfer_set_stream_id>('libusb_transfer_set_stream_id');
    return _libusb_transfer_set_stream_id(
      transfer,
      stream_id,
    );
  }

  _dart_libusb_transfer_set_stream_id _libusb_transfer_set_stream_id;

  int libusb_transfer_get_stream_id(
    ffi.Pointer<libusb_transfer> transfer,
  ) {
    _libusb_transfer_get_stream_id ??= _dylib.lookupFunction<
        _c_libusb_transfer_get_stream_id,
        _dart_libusb_transfer_get_stream_id>('libusb_transfer_get_stream_id');
    return _libusb_transfer_get_stream_id(
      transfer,
    );
  }

  _dart_libusb_transfer_get_stream_id _libusb_transfer_get_stream_id;

  /// \ingroup libusb_asyncio
  /// Helper function to populate the required \ref libusb_transfer fields
  /// for a control transfer.
  ///
  /// If you pass a transfer buffer to this function, the first 8 bytes will
  /// be interpreted as a control setup packet, and the wLength field will be
  /// used to automatically populate the \ref libusb_transfer::length "length"
  /// field of the transfer. Therefore the recommended approach is:
  /// -# Allocate a suitably sized data buffer (including space for control setup)
  /// -# Call libusb_fill_control_setup()
  /// -# If this is a host-to-device transfer with a data stage, put the data
  /// in place after the setup packet
  /// -# Call this function
  /// -# Call libusb_submit_transfer()
  ///
  /// It is also legal to pass a NULL buffer to this function, in which case this
  /// function will not attempt to populate the length field. Remember that you
  /// must then populate the buffer and length fields later.
  ///
  /// \param transfer the transfer to populate
  /// \param dev_handle handle of the device that will handle the transfer
  /// \param buffer data buffer. If provided, this function will interpret the
  /// first 8 bytes as a setup packet and infer the transfer length from that.
  /// This pointer must be aligned to at least 2 bytes boundary.
  /// \param callback callback function to be invoked on transfer completion
  /// \param user_data user data to pass to callback function
  /// \param timeout timeout for the transfer in milliseconds
  void libusb_fill_control_transfer(
    ffi.Pointer<libusb_transfer> transfer,
    ffi.Pointer<libusb_device_handle> dev_handle,
    ffi.Pointer<ffi.Uint8> buffer,
    ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
    ffi.Pointer<ffi.Void> user_data,
    int timeout,
  ) {
    _libusb_fill_control_transfer ??= _dylib.lookupFunction<
        _c_libusb_fill_control_transfer,
        _dart_libusb_fill_control_transfer>('libusb_fill_control_transfer');
    return _libusb_fill_control_transfer(
      transfer,
      dev_handle,
      buffer,
      callback,
      user_data,
      timeout,
    );
  }

  _dart_libusb_fill_control_transfer _libusb_fill_control_transfer;

  /// \ingroup libusb_asyncio
  /// Helper function to populate the required \ref libusb_transfer fields
  /// for a bulk transfer.
  ///
  /// \param transfer the transfer to populate
  /// \param dev_handle handle of the device that will handle the transfer
  /// \param endpoint address of the endpoint where this transfer will be sent
  /// \param buffer data buffer
  /// \param length length of data buffer
  /// \param callback callback function to be invoked on transfer completion
  /// \param user_data user data to pass to callback function
  /// \param timeout timeout for the transfer in milliseconds
  void libusb_fill_bulk_transfer(
    ffi.Pointer<libusb_transfer> transfer,
    ffi.Pointer<libusb_device_handle> dev_handle,
    int endpoint,
    ffi.Pointer<ffi.Uint8> buffer,
    int length,
    ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
    ffi.Pointer<ffi.Void> user_data,
    int timeout,
  ) {
    _libusb_fill_bulk_transfer ??= _dylib.lookupFunction<
        _c_libusb_fill_bulk_transfer,
        _dart_libusb_fill_bulk_transfer>('libusb_fill_bulk_transfer');
    return _libusb_fill_bulk_transfer(
      transfer,
      dev_handle,
      endpoint,
      buffer,
      length,
      callback,
      user_data,
      timeout,
    );
  }

  _dart_libusb_fill_bulk_transfer _libusb_fill_bulk_transfer;

  /// \ingroup libusb_asyncio
  /// Helper function to populate the required \ref libusb_transfer fields
  /// for a bulk transfer using bulk streams.
  ///
  /// Since version 1.0.19, \ref LIBUSB_API_VERSION >= 0x01000103
  ///
  /// \param transfer the transfer to populate
  /// \param dev_handle handle of the device that will handle the transfer
  /// \param endpoint address of the endpoint where this transfer will be sent
  /// \param stream_id bulk stream id for this transfer
  /// \param buffer data buffer
  /// \param length length of data buffer
  /// \param callback callback function to be invoked on transfer completion
  /// \param user_data user data to pass to callback function
  /// \param timeout timeout for the transfer in milliseconds
  void libusb_fill_bulk_stream_transfer(
    ffi.Pointer<libusb_transfer> transfer,
    ffi.Pointer<libusb_device_handle> dev_handle,
    int endpoint,
    int stream_id,
    ffi.Pointer<ffi.Uint8> buffer,
    int length,
    ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
    ffi.Pointer<ffi.Void> user_data,
    int timeout,
  ) {
    _libusb_fill_bulk_stream_transfer ??= _dylib.lookupFunction<
            _c_libusb_fill_bulk_stream_transfer,
            _dart_libusb_fill_bulk_stream_transfer>(
        'libusb_fill_bulk_stream_transfer');
    return _libusb_fill_bulk_stream_transfer(
      transfer,
      dev_handle,
      endpoint,
      stream_id,
      buffer,
      length,
      callback,
      user_data,
      timeout,
    );
  }

  _dart_libusb_fill_bulk_stream_transfer _libusb_fill_bulk_stream_transfer;

  /// \ingroup libusb_asyncio
  /// Helper function to populate the required \ref libusb_transfer fields
  /// for an interrupt transfer.
  ///
  /// \param transfer the transfer to populate
  /// \param dev_handle handle of the device that will handle the transfer
  /// \param endpoint address of the endpoint where this transfer will be sent
  /// \param buffer data buffer
  /// \param length length of data buffer
  /// \param callback callback function to be invoked on transfer completion
  /// \param user_data user data to pass to callback function
  /// \param timeout timeout for the transfer in milliseconds
  void libusb_fill_interrupt_transfer(
    ffi.Pointer<libusb_transfer> transfer,
    ffi.Pointer<libusb_device_handle> dev_handle,
    int endpoint,
    ffi.Pointer<ffi.Uint8> buffer,
    int length,
    ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
    ffi.Pointer<ffi.Void> user_data,
    int timeout,
  ) {
    _libusb_fill_interrupt_transfer ??= _dylib.lookupFunction<
        _c_libusb_fill_interrupt_transfer,
        _dart_libusb_fill_interrupt_transfer>('libusb_fill_interrupt_transfer');
    return _libusb_fill_interrupt_transfer(
      transfer,
      dev_handle,
      endpoint,
      buffer,
      length,
      callback,
      user_data,
      timeout,
    );
  }

  _dart_libusb_fill_interrupt_transfer _libusb_fill_interrupt_transfer;

  /// \ingroup libusb_asyncio
  /// Helper function to populate the required \ref libusb_transfer fields
  /// for an isochronous transfer.
  ///
  /// \param transfer the transfer to populate
  /// \param dev_handle handle of the device that will handle the transfer
  /// \param endpoint address of the endpoint where this transfer will be sent
  /// \param buffer data buffer
  /// \param length length of data buffer
  /// \param num_iso_packets the number of isochronous packets
  /// \param callback callback function to be invoked on transfer completion
  /// \param user_data user data to pass to callback function
  /// \param timeout timeout for the transfer in milliseconds
  void libusb_fill_iso_transfer(
    ffi.Pointer<libusb_transfer> transfer,
    ffi.Pointer<libusb_device_handle> dev_handle,
    int endpoint,
    ffi.Pointer<ffi.Uint8> buffer,
    int length,
    int num_iso_packets,
    ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
    ffi.Pointer<ffi.Void> user_data,
    int timeout,
  ) {
    _libusb_fill_iso_transfer ??= _dylib.lookupFunction<
        _c_libusb_fill_iso_transfer,
        _dart_libusb_fill_iso_transfer>('libusb_fill_iso_transfer');
    return _libusb_fill_iso_transfer(
      transfer,
      dev_handle,
      endpoint,
      buffer,
      length,
      num_iso_packets,
      callback,
      user_data,
      timeout,
    );
  }

  _dart_libusb_fill_iso_transfer _libusb_fill_iso_transfer;

  /// \ingroup libusb_asyncio
  /// Convenience function to set the length of all packets in an isochronous
  /// transfer, based on the num_iso_packets field in the transfer structure.
  ///
  /// \param transfer a transfer
  /// \param length the length to set in each isochronous packet descriptor
  /// \see libusb_get_max_packet_size()
  void libusb_set_iso_packet_lengths(
    ffi.Pointer<libusb_transfer> transfer,
    int length,
  ) {
    _libusb_set_iso_packet_lengths ??= _dylib.lookupFunction<
        _c_libusb_set_iso_packet_lengths,
        _dart_libusb_set_iso_packet_lengths>('libusb_set_iso_packet_lengths');
    return _libusb_set_iso_packet_lengths(
      transfer,
      length,
    );
  }

  _dart_libusb_set_iso_packet_lengths _libusb_set_iso_packet_lengths;

  /// \ingroup libusb_asyncio
  /// Convenience function to locate the position of an isochronous packet
  /// within the buffer of an isochronous transfer.
  ///
  /// This is a thorough function which loops through all preceding packets,
  /// accumulating their lengths to find the position of the specified packet.
  /// Typically you will assign equal lengths to each packet in the transfer,
  /// and hence the above method is sub-optimal. You may wish to use
  /// libusb_get_iso_packet_buffer_simple() instead.
  ///
  /// \param transfer a transfer
  /// \param packet the packet to return the address of
  /// \returns the base address of the packet buffer inside the transfer buffer,
  /// or NULL if the packet does not exist.
  /// \see libusb_get_iso_packet_buffer_simple()
  ffi.Pointer<ffi.Uint8> libusb_get_iso_packet_buffer(
    ffi.Pointer<libusb_transfer> transfer,
    int packet,
  ) {
    _libusb_get_iso_packet_buffer ??= _dylib.lookupFunction<
        _c_libusb_get_iso_packet_buffer,
        _dart_libusb_get_iso_packet_buffer>('libusb_get_iso_packet_buffer');
    return _libusb_get_iso_packet_buffer(
      transfer,
      packet,
    );
  }

  _dart_libusb_get_iso_packet_buffer _libusb_get_iso_packet_buffer;

  /// \ingroup libusb_asyncio
  /// Convenience function to locate the position of an isochronous packet
  /// within the buffer of an isochronous transfer, for transfers where each
  /// packet is of identical size.
  ///
  /// This function relies on the assumption that every packet within the transfer
  /// is of identical size to the first packet. Calculating the location of
  /// the packet buffer is then just a simple calculation:
  /// <tt>buffer + (packet_size * packet)</tt>
  ///
  /// Do not use this function on transfers other than those that have identical
  /// packet lengths for each packet.
  ///
  /// \param transfer a transfer
  /// \param packet the packet to return the address of
  /// \returns the base address of the packet buffer inside the transfer buffer,
  /// or NULL if the packet does not exist.
  /// \see libusb_get_iso_packet_buffer()
  ffi.Pointer<ffi.Uint8> libusb_get_iso_packet_buffer_simple(
    ffi.Pointer<libusb_transfer> transfer,
    int packet,
  ) {
    _libusb_get_iso_packet_buffer_simple ??= _dylib.lookupFunction<
            _c_libusb_get_iso_packet_buffer_simple,
            _dart_libusb_get_iso_packet_buffer_simple>(
        'libusb_get_iso_packet_buffer_simple');
    return _libusb_get_iso_packet_buffer_simple(
      transfer,
      packet,
    );
  }

  _dart_libusb_get_iso_packet_buffer_simple
      _libusb_get_iso_packet_buffer_simple;

  int libusb_control_transfer(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int request_type,
    int bRequest,
    int wValue,
    int wIndex,
    ffi.Pointer<ffi.Uint8> data,
    int wLength,
    int timeout,
  ) {
    _libusb_control_transfer ??= _dylib.lookupFunction<
        _c_libusb_control_transfer,
        _dart_libusb_control_transfer>('libusb_control_transfer');
    return _libusb_control_transfer(
      dev_handle,
      request_type,
      bRequest,
      wValue,
      wIndex,
      data,
      wLength,
      timeout,
    );
  }

  _dart_libusb_control_transfer _libusb_control_transfer;

  int libusb_bulk_transfer(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int endpoint,
    ffi.Pointer<ffi.Uint8> data,
    int length,
    ffi.Pointer<ffi.Int32> actual_length,
    int timeout,
  ) {
    _libusb_bulk_transfer ??= _dylib.lookupFunction<_c_libusb_bulk_transfer,
        _dart_libusb_bulk_transfer>('libusb_bulk_transfer');
    return _libusb_bulk_transfer(
      dev_handle,
      endpoint,
      data,
      length,
      actual_length,
      timeout,
    );
  }

  _dart_libusb_bulk_transfer _libusb_bulk_transfer;

  int libusb_interrupt_transfer(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int endpoint,
    ffi.Pointer<ffi.Uint8> data,
    int length,
    ffi.Pointer<ffi.Int32> actual_length,
    int timeout,
  ) {
    _libusb_interrupt_transfer ??= _dylib.lookupFunction<
        _c_libusb_interrupt_transfer,
        _dart_libusb_interrupt_transfer>('libusb_interrupt_transfer');
    return _libusb_interrupt_transfer(
      dev_handle,
      endpoint,
      data,
      length,
      actual_length,
      timeout,
    );
  }

  _dart_libusb_interrupt_transfer _libusb_interrupt_transfer;

  /// \ingroup libusb_desc
  /// Retrieve a descriptor from the default control pipe.
  /// This is a convenience function which formulates the appropriate control
  /// message to retrieve the descriptor.
  ///
  /// \param dev_handle a device handle
  /// \param desc_type the descriptor type, see \ref libusb_descriptor_type
  /// \param desc_index the index of the descriptor to retrieve
  /// \param data output buffer for descriptor
  /// \param length size of data buffer
  /// \returns number of bytes returned in data, or LIBUSB_ERROR code on failure
  int libusb_get_descriptor(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int desc_type,
    int desc_index,
    ffi.Pointer<ffi.Uint8> data,
    int length,
  ) {
    _libusb_get_descriptor ??= _dylib.lookupFunction<_c_libusb_get_descriptor,
        _dart_libusb_get_descriptor>('libusb_get_descriptor');
    return _libusb_get_descriptor(
      dev_handle,
      desc_type,
      desc_index,
      data,
      length,
    );
  }

  _dart_libusb_get_descriptor _libusb_get_descriptor;

  /// \ingroup libusb_desc
  /// Retrieve a descriptor from a device.
  /// This is a convenience function which formulates the appropriate control
  /// message to retrieve the descriptor. The string returned is Unicode, as
  /// detailed in the USB specifications.
  ///
  /// \param dev_handle a device handle
  /// \param desc_index the index of the descriptor to retrieve
  /// \param langid the language ID for the string descriptor
  /// \param data output buffer for descriptor
  /// \param length size of data buffer
  /// \returns number of bytes returned in data, or LIBUSB_ERROR code on failure
  /// \see libusb_get_string_descriptor_ascii()
  int libusb_get_string_descriptor(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int desc_index,
    int langid,
    ffi.Pointer<ffi.Uint8> data,
    int length,
  ) {
    _libusb_get_string_descriptor ??= _dylib.lookupFunction<
        _c_libusb_get_string_descriptor,
        _dart_libusb_get_string_descriptor>('libusb_get_string_descriptor');
    return _libusb_get_string_descriptor(
      dev_handle,
      desc_index,
      langid,
      data,
      length,
    );
  }

  _dart_libusb_get_string_descriptor _libusb_get_string_descriptor;

  int libusb_get_string_descriptor_ascii(
    ffi.Pointer<libusb_device_handle> dev_handle,
    int desc_index,
    ffi.Pointer<ffi.Uint8> data,
    int length,
  ) {
    _libusb_get_string_descriptor_ascii ??= _dylib.lookupFunction<
            _c_libusb_get_string_descriptor_ascii,
            _dart_libusb_get_string_descriptor_ascii>(
        'libusb_get_string_descriptor_ascii');
    return _libusb_get_string_descriptor_ascii(
      dev_handle,
      desc_index,
      data,
      length,
    );
  }

  _dart_libusb_get_string_descriptor_ascii _libusb_get_string_descriptor_ascii;

  int libusb_try_lock_events(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_try_lock_events ??= _dylib.lookupFunction<_c_libusb_try_lock_events,
        _dart_libusb_try_lock_events>('libusb_try_lock_events');
    return _libusb_try_lock_events(
      ctx,
    );
  }

  _dart_libusb_try_lock_events _libusb_try_lock_events;

  void libusb_lock_events(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_lock_events ??=
        _dylib.lookupFunction<_c_libusb_lock_events, _dart_libusb_lock_events>(
            'libusb_lock_events');
    return _libusb_lock_events(
      ctx,
    );
  }

  _dart_libusb_lock_events _libusb_lock_events;

  void libusb_unlock_events(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_unlock_events ??= _dylib.lookupFunction<_c_libusb_unlock_events,
        _dart_libusb_unlock_events>('libusb_unlock_events');
    return _libusb_unlock_events(
      ctx,
    );
  }

  _dart_libusb_unlock_events _libusb_unlock_events;

  int libusb_event_handling_ok(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_event_handling_ok ??= _dylib.lookupFunction<
        _c_libusb_event_handling_ok,
        _dart_libusb_event_handling_ok>('libusb_event_handling_ok');
    return _libusb_event_handling_ok(
      ctx,
    );
  }

  _dart_libusb_event_handling_ok _libusb_event_handling_ok;

  int libusb_event_handler_active(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_event_handler_active ??= _dylib.lookupFunction<
        _c_libusb_event_handler_active,
        _dart_libusb_event_handler_active>('libusb_event_handler_active');
    return _libusb_event_handler_active(
      ctx,
    );
  }

  _dart_libusb_event_handler_active _libusb_event_handler_active;

  void libusb_interrupt_event_handler(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_interrupt_event_handler ??= _dylib.lookupFunction<
        _c_libusb_interrupt_event_handler,
        _dart_libusb_interrupt_event_handler>('libusb_interrupt_event_handler');
    return _libusb_interrupt_event_handler(
      ctx,
    );
  }

  _dart_libusb_interrupt_event_handler _libusb_interrupt_event_handler;

  void libusb_lock_event_waiters(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_lock_event_waiters ??= _dylib.lookupFunction<
        _c_libusb_lock_event_waiters,
        _dart_libusb_lock_event_waiters>('libusb_lock_event_waiters');
    return _libusb_lock_event_waiters(
      ctx,
    );
  }

  _dart_libusb_lock_event_waiters _libusb_lock_event_waiters;

  void libusb_unlock_event_waiters(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_unlock_event_waiters ??= _dylib.lookupFunction<
        _c_libusb_unlock_event_waiters,
        _dart_libusb_unlock_event_waiters>('libusb_unlock_event_waiters');
    return _libusb_unlock_event_waiters(
      ctx,
    );
  }

  _dart_libusb_unlock_event_waiters _libusb_unlock_event_waiters;

  int libusb_wait_for_event(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<timeval> tv,
  ) {
    _libusb_wait_for_event ??= _dylib.lookupFunction<_c_libusb_wait_for_event,
        _dart_libusb_wait_for_event>('libusb_wait_for_event');
    return _libusb_wait_for_event(
      ctx,
      tv,
    );
  }

  _dart_libusb_wait_for_event _libusb_wait_for_event;

  int libusb_handle_events_timeout(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<timeval> tv,
  ) {
    _libusb_handle_events_timeout ??= _dylib.lookupFunction<
        _c_libusb_handle_events_timeout,
        _dart_libusb_handle_events_timeout>('libusb_handle_events_timeout');
    return _libusb_handle_events_timeout(
      ctx,
      tv,
    );
  }

  _dart_libusb_handle_events_timeout _libusb_handle_events_timeout;

  int libusb_handle_events_timeout_completed(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<timeval> tv,
    ffi.Pointer<ffi.Int32> completed,
  ) {
    _libusb_handle_events_timeout_completed ??= _dylib.lookupFunction<
            _c_libusb_handle_events_timeout_completed,
            _dart_libusb_handle_events_timeout_completed>(
        'libusb_handle_events_timeout_completed');
    return _libusb_handle_events_timeout_completed(
      ctx,
      tv,
      completed,
    );
  }

  _dart_libusb_handle_events_timeout_completed
      _libusb_handle_events_timeout_completed;

  int libusb_handle_events(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_handle_events ??= _dylib.lookupFunction<_c_libusb_handle_events,
        _dart_libusb_handle_events>('libusb_handle_events');
    return _libusb_handle_events(
      ctx,
    );
  }

  _dart_libusb_handle_events _libusb_handle_events;

  int libusb_handle_events_completed(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<ffi.Int32> completed,
  ) {
    _libusb_handle_events_completed ??= _dylib.lookupFunction<
        _c_libusb_handle_events_completed,
        _dart_libusb_handle_events_completed>('libusb_handle_events_completed');
    return _libusb_handle_events_completed(
      ctx,
      completed,
    );
  }

  _dart_libusb_handle_events_completed _libusb_handle_events_completed;

  int libusb_handle_events_locked(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<timeval> tv,
  ) {
    _libusb_handle_events_locked ??= _dylib.lookupFunction<
        _c_libusb_handle_events_locked,
        _dart_libusb_handle_events_locked>('libusb_handle_events_locked');
    return _libusb_handle_events_locked(
      ctx,
      tv,
    );
  }

  _dart_libusb_handle_events_locked _libusb_handle_events_locked;

  int libusb_pollfds_handle_timeouts(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_pollfds_handle_timeouts ??= _dylib.lookupFunction<
        _c_libusb_pollfds_handle_timeouts,
        _dart_libusb_pollfds_handle_timeouts>('libusb_pollfds_handle_timeouts');
    return _libusb_pollfds_handle_timeouts(
      ctx,
    );
  }

  _dart_libusb_pollfds_handle_timeouts _libusb_pollfds_handle_timeouts;

  int libusb_get_next_timeout(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<timeval> tv,
  ) {
    _libusb_get_next_timeout ??= _dylib.lookupFunction<
        _c_libusb_get_next_timeout,
        _dart_libusb_get_next_timeout>('libusb_get_next_timeout');
    return _libusb_get_next_timeout(
      ctx,
      tv,
    );
  }

  _dart_libusb_get_next_timeout _libusb_get_next_timeout;

  ffi.Pointer<ffi.Pointer<libusb_pollfd>> libusb_get_pollfds(
    ffi.Pointer<libusb_context> ctx,
  ) {
    _libusb_get_pollfds ??=
        _dylib.lookupFunction<_c_libusb_get_pollfds, _dart_libusb_get_pollfds>(
            'libusb_get_pollfds');
    return _libusb_get_pollfds(
      ctx,
    );
  }

  _dart_libusb_get_pollfds _libusb_get_pollfds;

  void libusb_free_pollfds(
    ffi.Pointer<ffi.Pointer<libusb_pollfd>> pollfds,
  ) {
    _libusb_free_pollfds ??= _dylib.lookupFunction<_c_libusb_free_pollfds,
        _dart_libusb_free_pollfds>('libusb_free_pollfds');
    return _libusb_free_pollfds(
      pollfds,
    );
  }

  _dart_libusb_free_pollfds _libusb_free_pollfds;

  void libusb_set_pollfd_notifiers(
    ffi.Pointer<libusb_context> ctx,
    ffi.Pointer<ffi.NativeFunction<libusb_pollfd_added_cb>> added_cb,
    ffi.Pointer<ffi.NativeFunction<libusb_pollfd_removed_cb>> removed_cb,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    _libusb_set_pollfd_notifiers ??= _dylib.lookupFunction<
        _c_libusb_set_pollfd_notifiers,
        _dart_libusb_set_pollfd_notifiers>('libusb_set_pollfd_notifiers');
    return _libusb_set_pollfd_notifiers(
      ctx,
      added_cb,
      removed_cb,
      user_data,
    );
  }

  _dart_libusb_set_pollfd_notifiers _libusb_set_pollfd_notifiers;

  /// \ingroup libusb_hotplug
  /// Register a hotplug callback function
  ///
  /// Register a callback with the libusb_context. The callback will fire
  /// when a matching event occurs on a matching device. The callback is
  /// armed until either it is deregistered with libusb_hotplug_deregister_callback()
  /// or the supplied callback returns 1 to indicate it is finished processing events.
  ///
  /// If the \ref LIBUSB_HOTPLUG_ENUMERATE is passed the callback will be
  /// called with a \ref LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED for all devices
  /// already plugged into the machine. Note that libusb modifies its internal
  /// device list from a separate thread, while calling hotplug callbacks from
  /// libusb_handle_events(), so it is possible for a device to already be present
  /// on, or removed from, its internal device list, while the hotplug callbacks
  /// still need to be dispatched. This means that when using \ref
  /// LIBUSB_HOTPLUG_ENUMERATE, your callback may be called twice for the arrival
  /// of the same device, once from libusb_hotplug_register_callback() and once
  /// from libusb_handle_events(); and/or your callback may be called for the
  /// removal of a device for which an arrived call was never made.
  ///
  /// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
  ///
  /// \param[in] ctx context to register this callback with
  /// \param[in] events bitwise or of events that will trigger this callback. See \ref
  /// libusb_hotplug_event
  /// \param[in] flags hotplug callback flags. See \ref libusb_hotplug_flag
  /// \param[in] vendor_id the vendor id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
  /// \param[in] product_id the product id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
  /// \param[in] dev_class the device class to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
  /// \param[in] cb_fn the function to be invoked on a matching event/device
  /// \param[in] user_data user data to pass to the callback function
  /// \param[out] callback_handle pointer to store the handle of the allocated callback (can be NULL)
  /// \returns LIBUSB_SUCCESS on success LIBUSB_ERROR code on failure
  int libusb_hotplug_register_callback(
    ffi.Pointer<libusb_context> ctx,
    int events,
    int flags,
    int vendor_id,
    int product_id,
    int dev_class,
    ffi.Pointer<ffi.NativeFunction<libusb_hotplug_callback_fn>> cb_fn,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Int32> callback_handle,
  ) {
    _libusb_hotplug_register_callback ??= _dylib.lookupFunction<
            _c_libusb_hotplug_register_callback,
            _dart_libusb_hotplug_register_callback>(
        'libusb_hotplug_register_callback');
    return _libusb_hotplug_register_callback(
      ctx,
      events,
      flags,
      vendor_id,
      product_id,
      dev_class,
      cb_fn,
      user_data,
      callback_handle,
    );
  }

  _dart_libusb_hotplug_register_callback _libusb_hotplug_register_callback;

  /// \ingroup libusb_hotplug
  /// Deregisters a hotplug callback.
  ///
  /// Deregister a callback from a libusb_context. This function is safe to call from within
  /// a hotplug callback.
  ///
  /// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
  ///
  /// \param[in] ctx context this callback is registered with
  /// \param[in] callback_handle the handle of the callback to deregister
  void libusb_hotplug_deregister_callback(
    ffi.Pointer<libusb_context> ctx,
    int callback_handle,
  ) {
    _libusb_hotplug_deregister_callback ??= _dylib.lookupFunction<
            _c_libusb_hotplug_deregister_callback,
            _dart_libusb_hotplug_deregister_callback>(
        'libusb_hotplug_deregister_callback');
    return _libusb_hotplug_deregister_callback(
      ctx,
      callback_handle,
    );
  }

  _dart_libusb_hotplug_deregister_callback _libusb_hotplug_deregister_callback;

  int libusb_set_option(
    ffi.Pointer<libusb_context> ctx,
    int option,
  ) {
    _libusb_set_option ??=
        _dylib.lookupFunction<_c_libusb_set_option, _dart_libusb_set_option>(
            'libusb_set_option');
    return _libusb_set_option(
      ctx,
      option,
    );
  }

  _dart_libusb_set_option _libusb_set_option;
}

class __fsid_t extends ffi.Struct {}

class __sigset_t extends ffi.Struct {}

class timeval extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_usec;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class fd_set extends ffi.Struct {}

class __pthread_rwlock_arch_t extends ffi.Struct {}

class __pthread_list_t extends ffi.Struct {
  ffi.Pointer<__pthread_list_t> __prev;

  ffi.Pointer<__pthread_list_t> __next;
}

class __pthread_mutex_s extends ffi.Struct {}

class __pthread_cond_s extends ffi.Struct {}

class timezone extends ffi.Struct {
  @ffi.Int32()
  int tz_minuteswest;

  @ffi.Int32()
  int tz_dsttime;
}

abstract class __itimer_which {
  static const int ITIMER_REAL = 0;
  static const int ITIMER_VIRTUAL = 1;
  static const int ITIMER_PROF = 2;
}

class itimerval extends ffi.Struct {}

class tm extends ffi.Struct {
  @ffi.Int32()
  int tm_sec;

  @ffi.Int32()
  int tm_min;

  @ffi.Int32()
  int tm_hour;

  @ffi.Int32()
  int tm_mday;

  @ffi.Int32()
  int tm_mon;

  @ffi.Int32()
  int tm_year;

  @ffi.Int32()
  int tm_wday;

  @ffi.Int32()
  int tm_yday;

  @ffi.Int32()
  int tm_isdst;

  @ffi.Int64()
  int tm_gmtoff;

  ffi.Pointer<ffi.Int8> tm_zone;
}

class itimerspec extends ffi.Struct {}

class sigevent extends ffi.Struct {}

class __locale_data extends ffi.Struct {}

class __locale_struct extends ffi.Struct {}

/// \ingroup libusb_desc
/// Device and/or Interface Class codes
abstract class libusb_class_code {
  /// In the context of a \ref libusb_device_descriptor "device descriptor",
  /// this bDeviceClass value indicates that each interface specifies its
  /// own class information and all interfaces operate independently.
  static const int LIBUSB_CLASS_PER_INTERFACE = 0;

  /// Audio class
  static const int LIBUSB_CLASS_AUDIO = 1;

  /// Communications class
  static const int LIBUSB_CLASS_COMM = 2;

  /// Human Interface Device class
  static const int LIBUSB_CLASS_HID = 3;

  /// Physical
  static const int LIBUSB_CLASS_PHYSICAL = 5;

  /// Printer class
  static const int LIBUSB_CLASS_PRINTER = 7;

  /// Image class
  static const int LIBUSB_CLASS_PTP = 6;
  static const int LIBUSB_CLASS_IMAGE = 6;

  /// Mass storage class
  static const int LIBUSB_CLASS_MASS_STORAGE = 8;

  /// Hub class
  static const int LIBUSB_CLASS_HUB = 9;

  /// Data class
  static const int LIBUSB_CLASS_DATA = 10;

  /// Smart Card
  static const int LIBUSB_CLASS_SMART_CARD = 11;

  /// Content Security
  static const int LIBUSB_CLASS_CONTENT_SECURITY = 13;

  /// Video
  static const int LIBUSB_CLASS_VIDEO = 14;

  /// Personal Healthcare
  static const int LIBUSB_CLASS_PERSONAL_HEALTHCARE = 15;

  /// Diagnostic Device
  static const int LIBUSB_CLASS_DIAGNOSTIC_DEVICE = 220;

  /// Wireless class
  static const int LIBUSB_CLASS_WIRELESS = 224;

  /// Application class
  static const int LIBUSB_CLASS_APPLICATION = 254;

  /// Class is vendor-specific
  static const int LIBUSB_CLASS_VENDOR_SPEC = 255;
}

/// \ingroup libusb_desc
/// Descriptor types as defined by the USB specification.
abstract class libusb_descriptor_type {
  /// Device descriptor. See libusb_device_descriptor.
  static const int LIBUSB_DT_DEVICE = 1;

  /// Configuration descriptor. See libusb_config_descriptor.
  static const int LIBUSB_DT_CONFIG = 2;

  /// String descriptor
  static const int LIBUSB_DT_STRING = 3;

  /// Interface descriptor. See libusb_interface_descriptor.
  static const int LIBUSB_DT_INTERFACE = 4;

  /// Endpoint descriptor. See libusb_endpoint_descriptor.
  static const int LIBUSB_DT_ENDPOINT = 5;

  /// BOS descriptor
  static const int LIBUSB_DT_BOS = 15;

  /// Device Capability descriptor
  static const int LIBUSB_DT_DEVICE_CAPABILITY = 16;

  /// HID descriptor
  static const int LIBUSB_DT_HID = 33;

  /// HID report descriptor
  static const int LIBUSB_DT_REPORT = 34;

  /// Physical descriptor
  static const int LIBUSB_DT_PHYSICAL = 35;

  /// Hub descriptor
  static const int LIBUSB_DT_HUB = 41;

  /// SuperSpeed Hub descriptor
  static const int LIBUSB_DT_SUPERSPEED_HUB = 42;

  /// SuperSpeed Endpoint Companion descriptor
  static const int LIBUSB_DT_SS_ENDPOINT_COMPANION = 48;
}

/// \ingroup libusb_desc
/// Endpoint direction. Values for bit 7 of the
/// \ref libusb_endpoint_descriptor::bEndpointAddress "endpoint address" scheme.
abstract class libusb_endpoint_direction {
  /// In: device-to-host
  static const int LIBUSB_ENDPOINT_IN = 128;

  /// Out: host-to-device
  static const int LIBUSB_ENDPOINT_OUT = 0;
}

/// \ingroup libusb_desc
/// Endpoint transfer type. Values for bits 0:1 of the
/// \ref libusb_endpoint_descriptor::bmAttributes "endpoint attributes" field.
abstract class libusb_transfer_type {
  /// Control endpoint
  static const int LIBUSB_TRANSFER_TYPE_CONTROL = 0;

  /// Isochronous endpoint
  static const int LIBUSB_TRANSFER_TYPE_ISOCHRONOUS = 1;

  /// Bulk endpoint
  static const int LIBUSB_TRANSFER_TYPE_BULK = 2;

  /// Interrupt endpoint
  static const int LIBUSB_TRANSFER_TYPE_INTERRUPT = 3;

  /// Stream endpoint
  static const int LIBUSB_TRANSFER_TYPE_BULK_STREAM = 4;
}

/// \ingroup libusb_misc
/// Standard requests, as defined in table 9-5 of the USB 3.0 specifications
abstract class libusb_standard_request {
  /// Request status of the specific recipient
  static const int LIBUSB_REQUEST_GET_STATUS = 0;

  /// Clear or disable a specific feature
  static const int LIBUSB_REQUEST_CLEAR_FEATURE = 1;

  /// Set or enable a specific feature
  static const int LIBUSB_REQUEST_SET_FEATURE = 3;

  /// Set device address for all future accesses
  static const int LIBUSB_REQUEST_SET_ADDRESS = 5;

  /// Get the specified descriptor
  static const int LIBUSB_REQUEST_GET_DESCRIPTOR = 6;

  /// Used to update existing descriptors or add new descriptors
  static const int LIBUSB_REQUEST_SET_DESCRIPTOR = 7;

  /// Get the current device configuration value
  static const int LIBUSB_REQUEST_GET_CONFIGURATION = 8;

  /// Set device configuration
  static const int LIBUSB_REQUEST_SET_CONFIGURATION = 9;

  /// Return the selected alternate setting for the specified interface
  static const int LIBUSB_REQUEST_GET_INTERFACE = 10;

  /// Select an alternate interface for the specified interface
  static const int LIBUSB_REQUEST_SET_INTERFACE = 11;

  /// Set then report an endpoint's synchronization frame
  static const int LIBUSB_REQUEST_SYNCH_FRAME = 12;

  /// Sets both the U1 and U2 Exit Latency
  static const int LIBUSB_REQUEST_SET_SEL = 48;

  /// Delay from the time a host transmits a packet to the time it is
  /// received by the device.
  static const int LIBUSB_SET_ISOCH_DELAY = 49;
}

/// \ingroup libusb_misc
/// Request type bits of the
/// \ref libusb_control_setup::bmRequestType "bmRequestType" field in control
/// transfers.
abstract class libusb_request_type {
  /// Standard
  static const int LIBUSB_REQUEST_TYPE_STANDARD = 0;

  /// Class
  static const int LIBUSB_REQUEST_TYPE_CLASS = 32;

  /// Vendor
  static const int LIBUSB_REQUEST_TYPE_VENDOR = 64;

  /// Reserved
  static const int LIBUSB_REQUEST_TYPE_RESERVED = 96;
}

/// \ingroup libusb_misc
/// Recipient bits of the
/// \ref libusb_control_setup::bmRequestType "bmRequestType" field in control
/// transfers. Values 4 through 31 are reserved.
abstract class libusb_request_recipient {
  /// Device
  static const int LIBUSB_RECIPIENT_DEVICE = 0;

  /// Interface
  static const int LIBUSB_RECIPIENT_INTERFACE = 1;

  /// Endpoint
  static const int LIBUSB_RECIPIENT_ENDPOINT = 2;

  /// Other
  static const int LIBUSB_RECIPIENT_OTHER = 3;
}

/// \ingroup libusb_desc
/// Synchronization type for isochronous endpoints. Values for bits 2:3 of the
/// \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in
/// libusb_endpoint_descriptor.
abstract class libusb_iso_sync_type {
  /// No synchronization
  static const int LIBUSB_ISO_SYNC_TYPE_NONE = 0;

  /// Asynchronous
  static const int LIBUSB_ISO_SYNC_TYPE_ASYNC = 1;

  /// Adaptive
  static const int LIBUSB_ISO_SYNC_TYPE_ADAPTIVE = 2;

  /// Synchronous
  static const int LIBUSB_ISO_SYNC_TYPE_SYNC = 3;
}

/// \ingroup libusb_desc
/// Usage type for isochronous endpoints. Values for bits 4:5 of the
/// \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in
/// libusb_endpoint_descriptor.
abstract class libusb_iso_usage_type {
  /// Data endpoint
  static const int LIBUSB_ISO_USAGE_TYPE_DATA = 0;

  /// Feedback endpoint
  static const int LIBUSB_ISO_USAGE_TYPE_FEEDBACK = 1;

  /// Implicit feedback Data endpoint
  static const int LIBUSB_ISO_USAGE_TYPE_IMPLICIT = 2;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB device descriptor. This
/// descriptor is documented in section 9.6.1 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_device_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_DEVICE LIBUSB_DT_DEVICE in this
  /// context.
  @ffi.Uint8()
  int bDescriptorType;

  /// USB specification release number in binary-coded decimal. A value of
  /// 0x0200 indicates USB 2.0, 0x0110 indicates USB 1.1, etc.
  @ffi.Uint16()
  int bcdUSB;

  /// USB-IF class code for the device. See \ref libusb_class_code.
  @ffi.Uint8()
  int bDeviceClass;

  /// USB-IF subclass code for the device, qualified by the bDeviceClass
  /// value
  @ffi.Uint8()
  int bDeviceSubClass;

  /// USB-IF protocol code for the device, qualified by the bDeviceClass and
  /// bDeviceSubClass values
  @ffi.Uint8()
  int bDeviceProtocol;

  /// Maximum packet size for endpoint 0
  @ffi.Uint8()
  int bMaxPacketSize0;

  /// USB-IF vendor ID
  @ffi.Uint16()
  int idVendor;

  /// USB-IF product ID
  @ffi.Uint16()
  int idProduct;

  /// Device release number in binary-coded decimal
  @ffi.Uint16()
  int bcdDevice;

  /// Index of string descriptor describing manufacturer
  @ffi.Uint8()
  int iManufacturer;

  /// Index of string descriptor describing product
  @ffi.Uint8()
  int iProduct;

  /// Index of string descriptor containing device serial number
  @ffi.Uint8()
  int iSerialNumber;

  /// Number of possible configurations
  @ffi.Uint8()
  int bNumConfigurations;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB endpoint descriptor. This
/// descriptor is documented in section 9.6.6 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_endpoint_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_ENDPOINT LIBUSB_DT_ENDPOINT in
  /// this context.
  @ffi.Uint8()
  int bDescriptorType;

  /// The address of the endpoint described by this descriptor. Bits 0:3 are
  /// the endpoint number. Bits 4:6 are reserved. Bit 7 indicates direction,
  /// see \ref libusb_endpoint_direction.
  @ffi.Uint8()
  int bEndpointAddress;

  /// Attributes which apply to the endpoint when it is configured using
  /// the bConfigurationValue. Bits 0:1 determine the transfer type and
  /// correspond to \ref libusb_transfer_type. Bits 2:3 are only used for
  /// isochronous endpoints and correspond to \ref libusb_iso_sync_type.
  /// Bits 4:5 are also only used for isochronous endpoints and correspond to
  /// \ref libusb_iso_usage_type. Bits 6:7 are reserved.
  @ffi.Uint8()
  int bmAttributes;

  /// Maximum packet size this endpoint is capable of sending/receiving.
  @ffi.Uint16()
  int wMaxPacketSize;

  /// Interval for polling endpoint for data transfers.
  @ffi.Uint8()
  int bInterval;

  /// For audio devices only: the rate at which synchronization feedback
  /// is provided.
  @ffi.Uint8()
  int bRefresh;

  /// For audio devices only: the address if the synch endpoint
  @ffi.Uint8()
  int bSynchAddress;

  /// Extra descriptors. If libusb encounters unknown endpoint descriptors,
  /// it will store them here, should you wish to parse them.
  ffi.Pointer<ffi.Uint8> extra;

  /// Length of the extra descriptors, in bytes.
  @ffi.Int32()
  int extra_length;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB interface descriptor. This
/// descriptor is documented in section 9.6.5 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_interface_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_INTERFACE LIBUSB_DT_INTERFACE
  /// in this context.
  @ffi.Uint8()
  int bDescriptorType;

  /// Number of this interface
  @ffi.Uint8()
  int bInterfaceNumber;

  /// Value used to select this alternate setting for this interface
  @ffi.Uint8()
  int bAlternateSetting;

  /// Number of endpoints used by this interface (excluding the control
  /// endpoint).
  @ffi.Uint8()
  int bNumEndpoints;

  /// USB-IF class code for this interface. See \ref libusb_class_code.
  @ffi.Uint8()
  int bInterfaceClass;

  /// USB-IF subclass code for this interface, qualified by the
  /// bInterfaceClass value
  @ffi.Uint8()
  int bInterfaceSubClass;

  /// USB-IF protocol code for this interface, qualified by the
  /// bInterfaceClass and bInterfaceSubClass values
  @ffi.Uint8()
  int bInterfaceProtocol;

  /// Index of string descriptor describing this interface
  @ffi.Uint8()
  int iInterface;

  /// Array of endpoint descriptors. This length of this array is determined
  /// by the bNumEndpoints field.
  ffi.Pointer<libusb_endpoint_descriptor> endpoint;

  /// Extra descriptors. If libusb encounters unknown interface descriptors,
  /// it will store them here, should you wish to parse them.
  ffi.Pointer<ffi.Uint8> extra;

  /// Length of the extra descriptors, in bytes.
  @ffi.Int32()
  int extra_length;
}

/// \ingroup libusb_desc
/// A collection of alternate settings for a particular USB interface.
class libusb_interface extends ffi.Struct {
  /// Array of interface descriptors. The length of this array is determined
  /// by the num_altsetting field.
  ffi.Pointer<libusb_interface_descriptor> altsetting;

  /// The number of alternate settings that belong to this interface
  @ffi.Int32()
  int num_altsetting;
}

/// \ingroup libusb_desc
/// A structure representing the standard USB configuration descriptor. This
/// descriptor is documented in section 9.6.3 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_config_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_CONFIG LIBUSB_DT_CONFIG
  /// in this context.
  @ffi.Uint8()
  int bDescriptorType;

  /// Total length of data returned for this configuration
  @ffi.Uint16()
  int wTotalLength;

  /// Number of interfaces supported by this configuration
  @ffi.Uint8()
  int bNumInterfaces;

  /// Identifier value for this configuration
  @ffi.Uint8()
  int bConfigurationValue;

  /// Index of string descriptor describing this configuration
  @ffi.Uint8()
  int iConfiguration;

  /// Configuration characteristics
  @ffi.Uint8()
  int bmAttributes;

  /// Maximum power consumption of the USB device from this bus in this
  /// configuration when the device is fully operation. Expressed in units
  /// of 2 mA when the device is operating in high-speed mode and in units
  /// of 8 mA when the device is operating in super-speed mode.
  @ffi.Uint8()
  int MaxPower;

  /// Array of interfaces supported by this configuration. The length of
  /// this array is determined by the bNumInterfaces field.
  ffi.Pointer<libusb_interface> interface_1;

  /// Extra descriptors. If libusb encounters unknown configuration
  /// descriptors, it will store them here, should you wish to parse them.
  ffi.Pointer<ffi.Uint8> extra;

  /// Length of the extra descriptors, in bytes.
  @ffi.Int32()
  int extra_length;
}

/// \ingroup libusb_desc
/// A structure representing the superspeed endpoint companion
/// descriptor. This descriptor is documented in section 9.6.7 of
/// the USB 3.0 specification. All multiple-byte fields are represented in
/// host-endian format.
class libusb_ss_endpoint_companion_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_SS_ENDPOINT_COMPANION in
  /// this context.
  @ffi.Uint8()
  int bDescriptorType;

  /// The maximum number of packets the endpoint can send or
  /// receive as part of a burst.
  @ffi.Uint8()
  int bMaxBurst;

  /// In bulk EP:	bits 4:0 represents the	maximum	number of
  /// streams the	EP supports. In	isochronous EP:	bits 1:0
  /// represents the Mult	- a zero based value that determines
  /// the	maximum	number of packets within a service interval
  @ffi.Uint8()
  int bmAttributes;

  /// The	total number of bytes this EP will transfer every
  /// service interval. valid only for periodic EPs.
  @ffi.Uint16()
  int wBytesPerInterval;
}

/// \ingroup libusb_desc
/// A generic representation of a BOS Device Capability descriptor. It is
/// advised to check bDevCapabilityType and call the matching
/// libusb_get_*_descriptor function to get a structure fully matching the type.
class libusb_bos_dev_capability_descriptor extends ffi.Struct {}

/// \ingroup libusb_desc
/// A structure representing the Binary Device Object Store (BOS) descriptor.
/// This descriptor is documented in section 9.6.2 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_bos_descriptor extends ffi.Struct {}

/// \ingroup libusb_desc
/// A structure representing the USB 2.0 Extension descriptor
/// This descriptor is documented in section 9.6.2.1 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_usb_2_0_extension_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_DEVICE_CAPABILITY
  /// LIBUSB_DT_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  int bDescriptorType;

  /// Capability type. Will have value
  /// \ref libusb_capability_type::LIBUSB_BT_USB_2_0_EXTENSION
  /// LIBUSB_BT_USB_2_0_EXTENSION in this context.
  @ffi.Uint8()
  int bDevCapabilityType;

  /// Bitmap encoding of supported device level features.
  /// A value of one in a bit location indicates a feature is
  /// supported; a value of zero indicates it is not supported.
  /// See \ref libusb_usb_2_0_extension_attributes.
  @ffi.Uint32()
  int bmAttributes;
}

/// \ingroup libusb_desc
/// A structure representing the SuperSpeed USB Device Capability descriptor
/// This descriptor is documented in section 9.6.2.2 of the USB 3.0 specification.
/// All multiple-byte fields are represented in host-endian format.
class libusb_ss_usb_device_capability_descriptor extends ffi.Struct {
  /// Size of this descriptor (in bytes)
  @ffi.Uint8()
  int bLength;

  /// Descriptor type. Will have value
  /// \ref libusb_descriptor_type::LIBUSB_DT_DEVICE_CAPABILITY
  /// LIBUSB_DT_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  int bDescriptorType;

  /// Capability type. Will have value
  /// \ref libusb_capability_type::LIBUSB_BT_SS_USB_DEVICE_CAPABILITY
  /// LIBUSB_BT_SS_USB_DEVICE_CAPABILITY in this context.
  @ffi.Uint8()
  int bDevCapabilityType;

  /// Bitmap encoding of supported device level features.
  /// A value of one in a bit location indicates a feature is
  /// supported; a value of zero indicates it is not supported.
  /// See \ref libusb_ss_usb_device_capability_attributes.
  @ffi.Uint8()
  int bmAttributes;

  /// Bitmap encoding of the speed supported by this device when
  /// operating in SuperSpeed mode. See \ref libusb_supported_speed.
  @ffi.Uint16()
  int wSpeedSupported;

  /// The lowest speed at which all the functionality supported
  /// by the device is available to the user. For example if the
  /// device supports all its functionality when connected at
  /// full speed and above then it sets this value to 1.
  @ffi.Uint8()
  int bFunctionalitySupport;

  /// U1 Device Exit Latency.
  @ffi.Uint8()
  int bU1DevExitLat;

  /// U2 Device Exit Latency.
  @ffi.Uint16()
  int bU2DevExitLat;
}

/// \ingroup libusb_desc
/// A structure representing the Container ID descriptor.
/// This descriptor is documented in section 9.6.2.3 of the USB 3.0 specification.
/// All multiple-byte fields, except UUIDs, are represented in host-endian format.
class libusb_container_id_descriptor extends ffi.Struct {}

/// \ingroup libusb_asyncio
/// Setup packet for control transfers.
class libusb_control_setup extends ffi.Struct {
  /// Request type. Bits 0:4 determine recipient, see
  /// \ref libusb_request_recipient. Bits 5:6 determine type, see
  /// \ref libusb_request_type. Bit 7 determines data transfer direction, see
  /// \ref libusb_endpoint_direction.
  @ffi.Uint8()
  int bmRequestType;

  /// Request. If the type bits of bmRequestType are equal to
  /// \ref libusb_request_type::LIBUSB_REQUEST_TYPE_STANDARD
  /// "LIBUSB_REQUEST_TYPE_STANDARD" then this field refers to
  /// \ref libusb_standard_request. For other cases, use of this field is
  /// application-specific.
  @ffi.Uint8()
  int bRequest;

  /// Value. Varies according to request
  @ffi.Uint16()
  int wValue;

  /// Index. Varies according to request, typically used to pass an index
  /// or offset
  @ffi.Uint16()
  int wIndex;

  /// Number of bytes to transfer
  @ffi.Uint16()
  int wLength;
}

class libusb_context extends ffi.Struct {}

class libusb_device extends ffi.Struct {}

class libusb_device_handle extends ffi.Struct {}

/// \ingroup libusb_lib
/// Structure providing the version of the libusb runtime
class libusb_version extends ffi.Struct {
  /// Library major version.
  @ffi.Uint16()
  int major;

  /// Library minor version.
  @ffi.Uint16()
  int minor;

  /// Library micro version.
  @ffi.Uint16()
  int micro;

  /// Library nano version.
  @ffi.Uint16()
  int nano;

  /// Library release candidate suffix string, e.g. "-rc4".
  ffi.Pointer<ffi.Int8> rc;

  /// For ABI compatibility only.
  ffi.Pointer<ffi.Int8> describe;
}

/// \ingroup libusb_dev
/// Speed codes. Indicates the speed at which the device is operating.
abstract class libusb_speed {
  /// The OS doesn't report or know the device speed.
  static const int LIBUSB_SPEED_UNKNOWN = 0;

  /// The device is operating at low speed (1.5MBit/s).
  static const int LIBUSB_SPEED_LOW = 1;

  /// The device is operating at full speed (12MBit/s).
  static const int LIBUSB_SPEED_FULL = 2;

  /// The device is operating at high speed (480MBit/s).
  static const int LIBUSB_SPEED_HIGH = 3;

  /// The device is operating at super speed (5000MBit/s).
  static const int LIBUSB_SPEED_SUPER = 4;

  /// The device is operating at super speed plus (10000MBit/s).
  static const int LIBUSB_SPEED_SUPER_PLUS = 5;
}

/// \ingroup libusb_dev
/// Supported speeds (wSpeedSupported) bitfield. Indicates what
/// speeds the device supports.
abstract class libusb_supported_speed {
  /// Low speed operation supported (1.5MBit/s).
  static const int LIBUSB_LOW_SPEED_OPERATION = 1;

  /// Full speed operation supported (12MBit/s).
  static const int LIBUSB_FULL_SPEED_OPERATION = 2;

  /// High speed operation supported (480MBit/s).
  static const int LIBUSB_HIGH_SPEED_OPERATION = 4;

  /// Superspeed operation supported (5000MBit/s).
  static const int LIBUSB_SUPER_SPEED_OPERATION = 8;
}

/// \ingroup libusb_dev
/// Masks for the bits of the
/// \ref libusb_usb_2_0_extension_descriptor::bmAttributes "bmAttributes" field
/// of the USB 2.0 Extension descriptor.
abstract class libusb_usb_2_0_extension_attributes {
  /// Supports Link Power Management (LPM)
  static const int LIBUSB_BM_LPM_SUPPORT = 2;
}

/// \ingroup libusb_dev
/// Masks for the bits of the
/// \ref libusb_ss_usb_device_capability_descriptor::bmAttributes "bmAttributes" field
/// field of the SuperSpeed USB Device Capability descriptor.
abstract class libusb_ss_usb_device_capability_attributes {
  /// Supports Latency Tolerance Messages (LTM)
  static const int LIBUSB_BM_LTM_SUPPORT = 2;
}

/// \ingroup libusb_dev
/// USB capability types
abstract class libusb_bos_type {
  /// Wireless USB device capability
  static const int LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY = 1;

  /// USB 2.0 extensions
  static const int LIBUSB_BT_USB_2_0_EXTENSION = 2;

  /// SuperSpeed USB device capability
  static const int LIBUSB_BT_SS_USB_DEVICE_CAPABILITY = 3;

  /// Container ID type
  static const int LIBUSB_BT_CONTAINER_ID = 4;
}

/// \ingroup libusb_misc
/// Error codes. Most libusb functions return 0 on success or one of these
/// codes on failure.
/// You can call libusb_error_name() to retrieve a string representation of an
/// error code or libusb_strerror() to get an end-user suitable description of
/// an error code.
abstract class libusb_error {
  /// Success (no error)
  static const int LIBUSB_SUCCESS = 0;

  /// Input/output error
  static const int LIBUSB_ERROR_IO = -1;

  /// Invalid parameter
  static const int LIBUSB_ERROR_INVALID_PARAM = -2;

  /// Access denied (insufficient permissions)
  static const int LIBUSB_ERROR_ACCESS = -3;

  /// No such device (it may have been disconnected)
  static const int LIBUSB_ERROR_NO_DEVICE = -4;

  /// Entity not found
  static const int LIBUSB_ERROR_NOT_FOUND = -5;

  /// Resource busy
  static const int LIBUSB_ERROR_BUSY = -6;

  /// Operation timed out
  static const int LIBUSB_ERROR_TIMEOUT = -7;

  /// Overflow
  static const int LIBUSB_ERROR_OVERFLOW = -8;

  /// Pipe error
  static const int LIBUSB_ERROR_PIPE = -9;

  /// System call interrupted (perhaps due to signal)
  static const int LIBUSB_ERROR_INTERRUPTED = -10;

  /// Insufficient memory
  static const int LIBUSB_ERROR_NO_MEM = -11;

  /// Operation not supported or unimplemented on this platform
  static const int LIBUSB_ERROR_NOT_SUPPORTED = -12;

  /// Other error
  static const int LIBUSB_ERROR_OTHER = -99;
}

/// \ingroup libusb_asyncio
/// Transfer status codes
abstract class libusb_transfer_status {
  /// Transfer completed without error. Note that this does not indicate
  /// that the entire amount of requested data was transferred.
  static const int LIBUSB_TRANSFER_COMPLETED = 0;

  /// Transfer failed
  static const int LIBUSB_TRANSFER_ERROR = 1;

  /// Transfer timed out
  static const int LIBUSB_TRANSFER_TIMED_OUT = 2;

  /// Transfer was cancelled
  static const int LIBUSB_TRANSFER_CANCELLED = 3;

  /// For bulk/interrupt endpoints: halt condition detected (endpoint
  /// stalled). For control endpoints: control request not supported.
  static const int LIBUSB_TRANSFER_STALL = 4;

  /// Device was disconnected
  static const int LIBUSB_TRANSFER_NO_DEVICE = 5;

  /// Device sent more data than requested
  static const int LIBUSB_TRANSFER_OVERFLOW = 6;
}

/// \ingroup libusb_asyncio
/// libusb_transfer.flags values
abstract class libusb_transfer_flags {
  /// Report short frames as errors
  static const int LIBUSB_TRANSFER_SHORT_NOT_OK = 1;

  /// Automatically free() transfer buffer during libusb_free_transfer().
  /// Note that buffers allocated with libusb_dev_mem_alloc() should not
  /// be attempted freed in this way, since free() is not an appropriate
  /// way to release such memory.
  static const int LIBUSB_TRANSFER_FREE_BUFFER = 2;

  /// Automatically call libusb_free_transfer() after callback returns.
  /// If this flag is set, it is illegal to call libusb_free_transfer()
  /// from your transfer callback, as this will result in a double-free
  /// when this flag is acted upon.
  static const int LIBUSB_TRANSFER_FREE_TRANSFER = 4;

  /// Terminate transfers that are a multiple of the endpoint's
  /// wMaxPacketSize with an extra zero length packet. This is useful
  /// when a device protocol mandates that each logical request is
  /// terminated by an incomplete packet (i.e. the logical requests are
  /// not separated by other means).
  ///
  /// This flag only affects host-to-device transfers to bulk and interrupt
  /// endpoints. In other situations, it is ignored.
  ///
  /// This flag only affects transfers with a length that is a multiple of
  /// the endpoint's wMaxPacketSize. On transfers of other lengths, this
  /// flag has no effect. Therefore, if you are working with a device that
  /// needs a ZLP whenever the end of the logical request falls on a packet
  /// boundary, then it is sensible to set this flag on <em>every</em>
  /// transfer (you do not have to worry about only setting it on transfers
  /// that end on the boundary).
  ///
  /// This flag is currently only supported on Linux.
  /// On other systems, libusb_submit_transfer() will return
  /// LIBUSB_ERROR_NOT_SUPPORTED for every transfer where this flag is set.
  ///
  /// Available since libusb-1.0.9.
  static const int LIBUSB_TRANSFER_ADD_ZERO_PACKET = 8;
}

/// \ingroup libusb_asyncio
/// Isochronous packet descriptor.
class libusb_iso_packet_descriptor extends ffi.Struct {
  /// Length of data to request in this packet
  @ffi.Uint32()
  int length;

  /// Amount of data that was actually transferred
  @ffi.Uint32()
  int actual_length;

  /// Status code for this packet
  @ffi.Int32()
  int status;
}

/// \ingroup libusb_asyncio
/// The generic USB transfer structure. The user populates this structure and
/// then submits it in order to request a transfer. After the transfer has
/// completed, the library populates the transfer with the results and passes
/// it back to the user.
class libusb_transfer extends ffi.Struct {}

/// \ingroup libusb_misc
/// Capabilities supported by an instance of libusb on the current running
/// platform. Test if the loaded library supports a given capability by calling
/// \ref libusb_has_capability().
abstract class libusb_capability {
  /// The libusb_has_capability() API is available.
  static const int LIBUSB_CAP_HAS_CAPABILITY = 0;

  /// Hotplug support is available on this platform.
  static const int LIBUSB_CAP_HAS_HOTPLUG = 1;

  /// The library can access HID devices without requiring user intervention.
  /// Note that before being able to actually access an HID device, you may
  /// still have to call additional libusb functions such as
  /// \ref libusb_detach_kernel_driver().
  static const int LIBUSB_CAP_HAS_HID_ACCESS = 256;

  /// The library supports detaching of the default USB driver, using
  /// \ref libusb_detach_kernel_driver(), if one is set by the OS kernel
  static const int LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER = 257;
}

/// \ingroup libusb_lib
/// Log message levels.
/// - LIBUSB_LOG_LEVEL_NONE (0)    : no messages ever printed by the library (default)
/// - LIBUSB_LOG_LEVEL_ERROR (1)   : error messages are printed to stderr
/// - LIBUSB_LOG_LEVEL_WARNING (2) : warning and error messages are printed to stderr
/// - LIBUSB_LOG_LEVEL_INFO (3)    : informational messages are printed to stderr
/// - LIBUSB_LOG_LEVEL_DEBUG (4)   : debug and informational messages are printed to stderr
abstract class libusb_log_level {
  static const int LIBUSB_LOG_LEVEL_NONE = 0;
  static const int LIBUSB_LOG_LEVEL_ERROR = 1;
  static const int LIBUSB_LOG_LEVEL_WARNING = 2;
  static const int LIBUSB_LOG_LEVEL_INFO = 3;
  static const int LIBUSB_LOG_LEVEL_DEBUG = 4;
}

/// \ingroup libusb_poll
/// File descriptor for polling
class libusb_pollfd extends ffi.Struct {
  /// Numeric file descriptor
  @ffi.Int32()
  int fd;

  /// Event flags to poll for from <poll.h>. POLLIN indicates that you
  /// should monitor this file descriptor for becoming ready to read from,
  /// and POLLOUT indicates that you should monitor this file descriptor for
  /// nonblocking write readiness.
  @ffi.Int16()
  int events;
}

/// \ingroup libusb_hotplug
///
/// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
///
/// Flags for hotplug events
abstract class libusb_hotplug_flag {
  /// Default value when not using any flags.
  static const int LIBUSB_HOTPLUG_NO_FLAGS = 0;

  /// Arm the callback and fire it for all matching currently attached devices.
  static const int LIBUSB_HOTPLUG_ENUMERATE = 1;
}

/// \ingroup libusb_hotplug
///
/// Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
///
/// Hotplug events
abstract class libusb_hotplug_event {
  /// A device has been plugged in and is ready to use
  static const int LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED = 1;

  /// A device has left and is no longer available.
  /// It is the user's responsibility to call libusb_close on any handle associated with a disconnected device.
  /// It is safe to call libusb_get_device_descriptor on a device that has left
  static const int LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT = 2;
}

/// \ingroup libusb_lib
/// Available option values for libusb_set_option().
abstract class libusb_option {
  /// Set the log message verbosity.
  ///
  /// The default level is LIBUSB_LOG_LEVEL_NONE, which means no messages are ever
  /// printed. If you choose to increase the message verbosity level, ensure
  /// that your application does not close the stderr file descriptor.
  ///
  /// You are advised to use level LIBUSB_LOG_LEVEL_WARNING. libusb is conservative
  /// with its message logging and most of the time, will only log messages that
  /// explain error conditions and other oddities. This will help you debug
  /// your software.
  ///
  /// If the LIBUSB_DEBUG environment variable was set when libusb was
  /// initialized, this function does nothing: the message verbosity is fixed
  /// to the value in the environment variable.
  ///
  /// If libusb was compiled without any message logging, this function does
  /// nothing: you'll never get any messages.
  ///
  /// If libusb was compiled with verbose debug message logging, this function
  /// does nothing: you'll always get messages from all levels.
  static const int LIBUSB_OPTION_LOG_LEVEL = 0;

  /// Use the UsbDk backend for a specific context, if available.
  ///
  /// This option should be set immediately after calling libusb_init(), otherwise
  /// unspecified behavior may occur.
  ///
  /// Only valid on Windows.
  static const int LIBUSB_OPTION_USE_USBDK = 1;
}

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __STDC_NO_THREADS__ = 1;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 27;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const String __FD_ZERO_STOS = 'stosq';

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _SYS_SYSMACROS_H = 1;

const int _BITS_SYSMACROS_H = 1;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int __PTHREAD_MUTEX_LOCK_ELISION = 1;

const int __PTHREAD_MUTEX_NUSERS_AFTER_KIND = 0;

const int __PTHREAD_MUTEX_USE_UNION = 0;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __PTHREAD_RWLOCK_INT_FLAGS_SHARED = 1;

const int __PTHREAD_SPINS = 0;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __have_pthread_attr_t = 1;

const int _SYS_TIME_H = 1;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int _TIME_H = 1;

const int NULL = 0;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int TIME_UTC = 1;

const int _LIBC_LIMITS_H_ = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int PTHREAD_STACK_MIN = 16384;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int ZERO_SIZED_ARRAY = 0;

const int LIBUSB_API_VERSION = 16777478;

const int LIBUSBX_API_VERSION = 16777478;

const int LIBUSB_DT_DEVICE_SIZE = 18;

const int LIBUSB_DT_CONFIG_SIZE = 9;

const int LIBUSB_DT_INTERFACE_SIZE = 9;

const int LIBUSB_DT_ENDPOINT_SIZE = 7;

const int LIBUSB_DT_ENDPOINT_AUDIO_SIZE = 9;

const int LIBUSB_DT_HUB_NONVAR_SIZE = 7;

const int LIBUSB_DT_SS_ENDPOINT_COMPANION_SIZE = 6;

const int LIBUSB_DT_BOS_SIZE = 5;

const int LIBUSB_DT_DEVICE_CAPABILITY_SIZE = 3;

const int LIBUSB_BT_USB_2_0_EXTENSION_SIZE = 7;

const int LIBUSB_BT_SS_USB_DEVICE_CAPABILITY_SIZE = 10;

const int LIBUSB_BT_CONTAINER_ID_SIZE = 20;

const int LIBUSB_DT_BOS_MAX_SIZE = 42;

const int LIBUSB_ENDPOINT_ADDRESS_MASK = 15;

const int LIBUSB_ENDPOINT_DIR_MASK = 128;

const int LIBUSB_TRANSFER_TYPE_MASK = 3;

const int LIBUSB_ISO_SYNC_TYPE_MASK = 12;

const int LIBUSB_ISO_USAGE_TYPE_MASK = 48;

const int LIBUSB_CONTROL_SETUP_SIZE = 8;

const int LIBUSB_ERROR_COUNT = 14;

const int LIBUSB_HOTPLUG_MATCH_ANY = -1;

typedef _c___uint16_identity = ffi.Uint16 Function(
  ffi.Uint16 __x,
);

typedef _dart___uint16_identity = int Function(
  int __x,
);

typedef _c___uint32_identity = ffi.Uint32 Function(
  ffi.Uint32 __x,
);

typedef _dart___uint32_identity = int Function(
  int __x,
);

typedef _c___uint64_identity = ffi.Uint64 Function(
  ffi.Uint64 __x,
);

typedef _dart___uint64_identity = int Function(
  int __x,
);

typedef _c_select = ffi.Int32 Function(
  ffi.Int32 __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

typedef _dart_select = int Function(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

typedef _c_pselect = ffi.Int32 Function(
  ffi.Int32 __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<__sigset_t> __sigmask,
);

typedef _dart_pselect = int Function(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<__sigset_t> __sigmask,
);

typedef _c_gnu_dev_major = ffi.Uint32 Function(
  ffi.Uint64 __dev,
);

typedef _dart_gnu_dev_major = int Function(
  int __dev,
);

typedef _c_gnu_dev_minor = ffi.Uint32 Function(
  ffi.Uint64 __dev,
);

typedef _dart_gnu_dev_minor = int Function(
  int __dev,
);

typedef _c_gnu_dev_makedev = ffi.Uint64 Function(
  ffi.Uint32 __major,
  ffi.Uint32 __minor,
);

typedef _dart_gnu_dev_makedev = int Function(
  int __major,
  int __minor,
);

typedef _c_gettimeofday = ffi.Int32 Function(
  ffi.Pointer<timeval> __tv,
  ffi.Pointer<timezone> __tz,
);

typedef _dart_gettimeofday = int Function(
  ffi.Pointer<timeval> __tv,
  ffi.Pointer<timezone> __tz,
);

typedef _c_settimeofday = ffi.Int32 Function(
  ffi.Pointer<timeval> __tv,
  ffi.Pointer<timezone> __tz,
);

typedef _dart_settimeofday = int Function(
  ffi.Pointer<timeval> __tv,
  ffi.Pointer<timezone> __tz,
);

typedef _c_adjtime = ffi.Int32 Function(
  ffi.Pointer<timeval> __delta,
  ffi.Pointer<timeval> __olddelta,
);

typedef _dart_adjtime = int Function(
  ffi.Pointer<timeval> __delta,
  ffi.Pointer<timeval> __olddelta,
);

typedef _c_getitimer = ffi.Int32 Function(
  ffi.Int32 __which,
  ffi.Pointer<itimerval> __value,
);

typedef _dart_getitimer = int Function(
  int __which,
  ffi.Pointer<itimerval> __value,
);

typedef _c_setitimer = ffi.Int32 Function(
  ffi.Int32 __which,
  ffi.Pointer<itimerval> __new,
  ffi.Pointer<itimerval> __old,
);

typedef _dart_setitimer = int Function(
  int __which,
  ffi.Pointer<itimerval> __new,
  ffi.Pointer<itimerval> __old,
);

typedef _c_utimes = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<timeval> __tvp,
);

typedef _dart_utimes = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<timeval> __tvp,
);

typedef _c_lutimes = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<timeval> __tvp,
);

typedef _dart_lutimes = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<timeval> __tvp,
);

typedef _c_futimes = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<timeval> __tvp,
);

typedef _dart_futimes = int Function(
  int __fd,
  ffi.Pointer<timeval> __tvp,
);

typedef _c_clock = ffi.Int64 Function();

typedef _dart_clock = int Function();

typedef _c_time = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_time = int Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_difftime = ffi.Double Function(
  ffi.Int64 __time1,
  ffi.Int64 __time0,
);

typedef _dart_difftime = double Function(
  int __time1,
  int __time0,
);

typedef _c_mktime = ffi.Int64 Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_mktime = int Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_strftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
);

typedef _dart_strftime = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
);

typedef _c_strftime_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_strftime_l = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _dart_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _c_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _dart_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _c_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_tzset = ffi.Void Function();

typedef _dart_tzset = void Function();

typedef _c_stime = ffi.Int32 Function(
  ffi.Pointer<ffi.Int64> __when,
);

typedef _dart_stime = int Function(
  ffi.Pointer<ffi.Int64> __when,
);

typedef _c_timegm = ffi.Int64 Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_timegm = int Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_timelocal = ffi.Int64 Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_timelocal = int Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_dysize = ffi.Int32 Function(
  ffi.Int32 __year,
);

typedef _dart_dysize = int Function(
  int __year,
);

typedef _c_nanosleep = ffi.Int32 Function(
  ffi.Pointer<timespec> __requested_time,
  ffi.Pointer<timespec> __remaining,
);

typedef _dart_nanosleep = int Function(
  ffi.Pointer<timespec> __requested_time,
  ffi.Pointer<timespec> __remaining,
);

typedef _c_clock_getres = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _dart_clock_getres = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _c_clock_gettime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_gettime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_clock_settime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_settime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_clock_nanosleep = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Int32 __flags,
  ffi.Pointer<timespec> __req,
  ffi.Pointer<timespec> __rem,
);

typedef _dart_clock_nanosleep = int Function(
  int __clock_id,
  int __flags,
  ffi.Pointer<timespec> __req,
  ffi.Pointer<timespec> __rem,
);

typedef _c_clock_getcpuclockid = ffi.Int32 Function(
  ffi.Int32 __pid,
  ffi.Pointer<ffi.Int32> __clock_id,
);

typedef _dart_clock_getcpuclockid = int Function(
  int __pid,
  ffi.Pointer<ffi.Int32> __clock_id,
);

typedef _c_timer_create = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<sigevent> __evp,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __timerid,
);

typedef _dart_timer_create = int Function(
  int __clock_id,
  ffi.Pointer<sigevent> __evp,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __timerid,
);

typedef _c_timer_delete = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _dart_timer_delete = int Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _c_timer_settime = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
  ffi.Int32 __flags,
  ffi.Pointer<itimerspec> __value,
  ffi.Pointer<itimerspec> __ovalue,
);

typedef _dart_timer_settime = int Function(
  ffi.Pointer<ffi.Void> __timerid,
  int __flags,
  ffi.Pointer<itimerspec> __value,
  ffi.Pointer<itimerspec> __ovalue,
);

typedef _c_timer_gettime = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
  ffi.Pointer<itimerspec> __value,
);

typedef _dart_timer_gettime = int Function(
  ffi.Pointer<ffi.Void> __timerid,
  ffi.Pointer<itimerspec> __value,
);

typedef _c_timer_getoverrun = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _dart_timer_getoverrun = int Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _c_timespec_get = ffi.Int32 Function(
  ffi.Pointer<timespec> __ts,
  ffi.Int32 __base,
);

typedef _dart_timespec_get = int Function(
  ffi.Pointer<timespec> __ts,
  int __base,
);

typedef _c_libusb_cpu_to_le16 = ffi.Uint16 Function(
  ffi.Uint16 x,
);

typedef _dart_libusb_cpu_to_le16 = int Function(
  int x,
);

typedef _c_libusb_init = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<libusb_context>> ctx,
);

typedef _dart_libusb_init = int Function(
  ffi.Pointer<ffi.Pointer<libusb_context>> ctx,
);

typedef _c_libusb_exit = ffi.Void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_exit = void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_set_debug = ffi.Void Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Int32 level,
);

typedef _dart_libusb_set_debug = void Function(
  ffi.Pointer<libusb_context> ctx,
  int level,
);

typedef _c_libusb_get_version = ffi.Pointer<libusb_version> Function();

typedef _dart_libusb_get_version = ffi.Pointer<libusb_version> Function();

typedef _c_libusb_has_capability = ffi.Int32 Function(
  ffi.Uint32 capability,
);

typedef _dart_libusb_has_capability = int Function(
  int capability,
);

typedef _c_libusb_error_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 errcode,
);

typedef _dart_libusb_error_name = ffi.Pointer<ffi.Int8> Function(
  int errcode,
);

typedef _c_libusb_setlocale = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> locale,
);

typedef _dart_libusb_setlocale = int Function(
  ffi.Pointer<ffi.Int8> locale,
);

typedef _c_libusb_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 errcode,
);

typedef _dart_libusb_strerror = ffi.Pointer<ffi.Int8> Function(
  int errcode,
);

typedef _c_libusb_get_device_list = ffi.Int64 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<libusb_device>>> list,
);

typedef _dart_libusb_get_device_list = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<libusb_device>>> list,
);

typedef _c_libusb_free_device_list = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<libusb_device>> list,
  ffi.Int32 unref_devices,
);

typedef _dart_libusb_free_device_list = void Function(
  ffi.Pointer<ffi.Pointer<libusb_device>> list,
  int unref_devices,
);

typedef _c_libusb_ref_device = ffi.Pointer<libusb_device> Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _dart_libusb_ref_device = ffi.Pointer<libusb_device> Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _c_libusb_unref_device = ffi.Void Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _dart_libusb_unref_device = void Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _c_libusb_get_configuration = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev,
  ffi.Pointer<ffi.Int32> config,
);

typedef _dart_libusb_get_configuration = int Function(
  ffi.Pointer<libusb_device_handle> dev,
  ffi.Pointer<ffi.Int32> config,
);

typedef _c_libusb_get_device_descriptor = ffi.Int32 Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Pointer<libusb_device_descriptor> desc,
);

typedef _dart_libusb_get_device_descriptor = int Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Pointer<libusb_device_descriptor> desc,
);

typedef _c_libusb_get_active_config_descriptor = ffi.Int32 Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
);

typedef _dart_libusb_get_active_config_descriptor = int Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
);

typedef _c_libusb_get_config_descriptor = ffi.Int32 Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Uint8 config_index,
  ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
);

typedef _dart_libusb_get_config_descriptor = int Function(
  ffi.Pointer<libusb_device> dev,
  int config_index,
  ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
);

typedef _c_libusb_get_config_descriptor_by_value = ffi.Int32 Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Uint8 bConfigurationValue,
  ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
);

typedef _dart_libusb_get_config_descriptor_by_value = int Function(
  ffi.Pointer<libusb_device> dev,
  int bConfigurationValue,
  ffi.Pointer<ffi.Pointer<libusb_config_descriptor>> config,
);

typedef _c_libusb_free_config_descriptor = ffi.Void Function(
  ffi.Pointer<libusb_config_descriptor> config,
);

typedef _dart_libusb_free_config_descriptor = void Function(
  ffi.Pointer<libusb_config_descriptor> config,
);

typedef _c_libusb_get_ss_endpoint_companion_descriptor = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<libusb_endpoint_descriptor> endpoint,
  ffi.Pointer<ffi.Pointer<libusb_ss_endpoint_companion_descriptor>> ep_comp,
);

typedef _dart_libusb_get_ss_endpoint_companion_descriptor = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<libusb_endpoint_descriptor> endpoint,
  ffi.Pointer<ffi.Pointer<libusb_ss_endpoint_companion_descriptor>> ep_comp,
);

typedef _c_libusb_free_ss_endpoint_companion_descriptor = ffi.Void Function(
  ffi.Pointer<libusb_ss_endpoint_companion_descriptor> ep_comp,
);

typedef _dart_libusb_free_ss_endpoint_companion_descriptor = void Function(
  ffi.Pointer<libusb_ss_endpoint_companion_descriptor> ep_comp,
);

typedef _c_libusb_get_bos_descriptor = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Pointer<ffi.Pointer<libusb_bos_descriptor>> bos,
);

typedef _dart_libusb_get_bos_descriptor = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Pointer<ffi.Pointer<libusb_bos_descriptor>> bos,
);

typedef _c_libusb_free_bos_descriptor = ffi.Void Function(
  ffi.Pointer<libusb_bos_descriptor> bos,
);

typedef _dart_libusb_free_bos_descriptor = void Function(
  ffi.Pointer<libusb_bos_descriptor> bos,
);

typedef _c_libusb_get_usb_2_0_extension_descriptor = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
  ffi.Pointer<ffi.Pointer<libusb_usb_2_0_extension_descriptor>>
      usb_2_0_extension,
);

typedef _dart_libusb_get_usb_2_0_extension_descriptor = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
  ffi.Pointer<ffi.Pointer<libusb_usb_2_0_extension_descriptor>>
      usb_2_0_extension,
);

typedef _c_libusb_free_usb_2_0_extension_descriptor = ffi.Void Function(
  ffi.Pointer<libusb_usb_2_0_extension_descriptor> usb_2_0_extension,
);

typedef _dart_libusb_free_usb_2_0_extension_descriptor = void Function(
  ffi.Pointer<libusb_usb_2_0_extension_descriptor> usb_2_0_extension,
);

typedef _c_libusb_get_ss_usb_device_capability_descriptor = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
  ffi.Pointer<ffi.Pointer<libusb_ss_usb_device_capability_descriptor>>
      ss_usb_device_cap,
);

typedef _dart_libusb_get_ss_usb_device_capability_descriptor = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
  ffi.Pointer<ffi.Pointer<libusb_ss_usb_device_capability_descriptor>>
      ss_usb_device_cap,
);

typedef _c_libusb_free_ss_usb_device_capability_descriptor = ffi.Void Function(
  ffi.Pointer<libusb_ss_usb_device_capability_descriptor> ss_usb_device_cap,
);

typedef _dart_libusb_free_ss_usb_device_capability_descriptor = void Function(
  ffi.Pointer<libusb_ss_usb_device_capability_descriptor> ss_usb_device_cap,
);

typedef _c_libusb_get_container_id_descriptor = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
  ffi.Pointer<ffi.Pointer<libusb_container_id_descriptor>> container_id,
);

typedef _dart_libusb_get_container_id_descriptor = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<libusb_bos_dev_capability_descriptor> dev_cap,
  ffi.Pointer<ffi.Pointer<libusb_container_id_descriptor>> container_id,
);

typedef _c_libusb_free_container_id_descriptor = ffi.Void Function(
  ffi.Pointer<libusb_container_id_descriptor> container_id,
);

typedef _dart_libusb_free_container_id_descriptor = void Function(
  ffi.Pointer<libusb_container_id_descriptor> container_id,
);

typedef _c_libusb_get_bus_number = ffi.Uint8 Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _dart_libusb_get_bus_number = int Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _c_libusb_get_port_number = ffi.Uint8 Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _dart_libusb_get_port_number = int Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _c_libusb_get_port_numbers = ffi.Int32 Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Pointer<ffi.Uint8> port_numbers,
  ffi.Int32 port_numbers_len,
);

typedef _dart_libusb_get_port_numbers = int Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Pointer<ffi.Uint8> port_numbers,
  int port_numbers_len,
);

typedef _c_libusb_get_port_path = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<libusb_device> dev,
  ffi.Pointer<ffi.Uint8> path,
  ffi.Uint8 path_length,
);

typedef _dart_libusb_get_port_path = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<libusb_device> dev,
  ffi.Pointer<ffi.Uint8> path,
  int path_length,
);

typedef _c_libusb_get_parent = ffi.Pointer<libusb_device> Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _dart_libusb_get_parent = ffi.Pointer<libusb_device> Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _c_libusb_get_device_address = ffi.Uint8 Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _dart_libusb_get_device_address = int Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _c_libusb_get_device_speed = ffi.Int32 Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _dart_libusb_get_device_speed = int Function(
  ffi.Pointer<libusb_device> dev,
);

typedef _c_libusb_get_max_packet_size = ffi.Int32 Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Uint8 endpoint,
);

typedef _dart_libusb_get_max_packet_size = int Function(
  ffi.Pointer<libusb_device> dev,
  int endpoint,
);

typedef _c_libusb_get_max_iso_packet_size = ffi.Int32 Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Uint8 endpoint,
);

typedef _dart_libusb_get_max_iso_packet_size = int Function(
  ffi.Pointer<libusb_device> dev,
  int endpoint,
);

typedef _c_libusb_open = ffi.Int32 Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Pointer<ffi.Pointer<libusb_device_handle>> dev_handle,
);

typedef _dart_libusb_open = int Function(
  ffi.Pointer<libusb_device> dev,
  ffi.Pointer<ffi.Pointer<libusb_device_handle>> dev_handle,
);

typedef _c_libusb_close = ffi.Void Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
);

typedef _dart_libusb_close = void Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
);

typedef _c_libusb_get_device = ffi.Pointer<libusb_device> Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
);

typedef _dart_libusb_get_device = ffi.Pointer<libusb_device> Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
);

typedef _c_libusb_set_configuration = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Int32 configuration,
);

typedef _dart_libusb_set_configuration = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int configuration,
);

typedef _c_libusb_claim_interface = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Int32 interface_number,
);

typedef _dart_libusb_claim_interface = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int interface_number,
);

typedef _c_libusb_release_interface = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Int32 interface_number,
);

typedef _dart_libusb_release_interface = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int interface_number,
);

typedef _c_libusb_open_device_with_vid_pid = ffi.Pointer<libusb_device_handle>
    Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Uint16 vendor_id,
  ffi.Uint16 product_id,
);

typedef _dart_libusb_open_device_with_vid_pid
    = ffi.Pointer<libusb_device_handle> Function(
  ffi.Pointer<libusb_context> ctx,
  int vendor_id,
  int product_id,
);

typedef _c_libusb_set_interface_alt_setting = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Int32 interface_number,
  ffi.Int32 alternate_setting,
);

typedef _dart_libusb_set_interface_alt_setting = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int interface_number,
  int alternate_setting,
);

typedef _c_libusb_clear_halt = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 endpoint,
);

typedef _dart_libusb_clear_halt = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int endpoint,
);

typedef _c_libusb_reset_device = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
);

typedef _dart_libusb_reset_device = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
);

typedef _c_libusb_alloc_streams = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint32 num_streams,
  ffi.Pointer<ffi.Uint8> endpoints,
  ffi.Int32 num_endpoints,
);

typedef _dart_libusb_alloc_streams = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int num_streams,
  ffi.Pointer<ffi.Uint8> endpoints,
  int num_endpoints,
);

typedef _c_libusb_free_streams = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Pointer<ffi.Uint8> endpoints,
  ffi.Int32 num_endpoints,
);

typedef _dart_libusb_free_streams = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Pointer<ffi.Uint8> endpoints,
  int num_endpoints,
);

typedef _c_libusb_dev_mem_alloc = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint64 length,
);

typedef _dart_libusb_dev_mem_alloc = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int length,
);

typedef _c_libusb_dev_mem_free = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Uint64 length,
);

typedef _dart_libusb_dev_mem_free = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Pointer<ffi.Uint8> buffer,
  int length,
);

typedef _c_libusb_kernel_driver_active = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Int32 interface_number,
);

typedef _dart_libusb_kernel_driver_active = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int interface_number,
);

typedef _c_libusb_detach_kernel_driver = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Int32 interface_number,
);

typedef _dart_libusb_detach_kernel_driver = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int interface_number,
);

typedef _c_libusb_attach_kernel_driver = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Int32 interface_number,
);

typedef _dart_libusb_attach_kernel_driver = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int interface_number,
);

typedef _c_libusb_set_auto_detach_kernel_driver = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Int32 enable,
);

typedef _dart_libusb_set_auto_detach_kernel_driver = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int enable,
);

typedef _c_libusb_control_transfer_get_data = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _dart_libusb_control_transfer_get_data = ffi.Pointer<ffi.Uint8>
    Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _c_libusb_control_transfer_get_setup = ffi.Pointer<libusb_control_setup>
    Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _dart_libusb_control_transfer_get_setup
    = ffi.Pointer<libusb_control_setup> Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _c_libusb_fill_control_setup = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Uint8 bmRequestType,
  ffi.Uint8 bRequest,
  ffi.Uint16 wValue,
  ffi.Uint16 wIndex,
  ffi.Uint16 wLength,
);

typedef _dart_libusb_fill_control_setup = void Function(
  ffi.Pointer<ffi.Uint8> buffer,
  int bmRequestType,
  int bRequest,
  int wValue,
  int wIndex,
  int wLength,
);

typedef _c_libusb_alloc_transfer = ffi.Pointer<libusb_transfer> Function(
  ffi.Int32 iso_packets,
);

typedef _dart_libusb_alloc_transfer = ffi.Pointer<libusb_transfer> Function(
  int iso_packets,
);

typedef _c_libusb_submit_transfer = ffi.Int32 Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _dart_libusb_submit_transfer = int Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _c_libusb_cancel_transfer = ffi.Int32 Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _dart_libusb_cancel_transfer = int Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _c_libusb_free_transfer = ffi.Void Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _dart_libusb_free_transfer = void Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _c_libusb_transfer_set_stream_id = ffi.Void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Uint32 stream_id,
);

typedef _dart_libusb_transfer_set_stream_id = void Function(
  ffi.Pointer<libusb_transfer> transfer,
  int stream_id,
);

typedef _c_libusb_transfer_get_stream_id = ffi.Uint32 Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef _dart_libusb_transfer_get_stream_id = int Function(
  ffi.Pointer<libusb_transfer> transfer,
);

typedef libusb_transfer_cb_fn = ffi.Void Function(
  ffi.Pointer<libusb_transfer>,
);

typedef _c_libusb_fill_control_transfer = ffi.Void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Uint32 timeout,
);

typedef _dart_libusb_fill_control_transfer = void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
  ffi.Pointer<ffi.Void> user_data,
  int timeout,
);

typedef _c_libusb_fill_bulk_transfer = ffi.Void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 endpoint,
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Int32 length,
  ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Uint32 timeout,
);

typedef _dart_libusb_fill_bulk_transfer = void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Pointer<libusb_device_handle> dev_handle,
  int endpoint,
  ffi.Pointer<ffi.Uint8> buffer,
  int length,
  ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
  ffi.Pointer<ffi.Void> user_data,
  int timeout,
);

typedef _c_libusb_fill_bulk_stream_transfer = ffi.Void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 endpoint,
  ffi.Uint32 stream_id,
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Int32 length,
  ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Uint32 timeout,
);

typedef _dart_libusb_fill_bulk_stream_transfer = void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Pointer<libusb_device_handle> dev_handle,
  int endpoint,
  int stream_id,
  ffi.Pointer<ffi.Uint8> buffer,
  int length,
  ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
  ffi.Pointer<ffi.Void> user_data,
  int timeout,
);

typedef _c_libusb_fill_interrupt_transfer = ffi.Void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 endpoint,
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Int32 length,
  ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Uint32 timeout,
);

typedef _dart_libusb_fill_interrupt_transfer = void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Pointer<libusb_device_handle> dev_handle,
  int endpoint,
  ffi.Pointer<ffi.Uint8> buffer,
  int length,
  ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
  ffi.Pointer<ffi.Void> user_data,
  int timeout,
);

typedef _c_libusb_fill_iso_transfer = ffi.Void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 endpoint,
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Int32 length,
  ffi.Int32 num_iso_packets,
  ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Uint32 timeout,
);

typedef _dart_libusb_fill_iso_transfer = void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Pointer<libusb_device_handle> dev_handle,
  int endpoint,
  ffi.Pointer<ffi.Uint8> buffer,
  int length,
  int num_iso_packets,
  ffi.Pointer<ffi.NativeFunction<libusb_transfer_cb_fn>> callback,
  ffi.Pointer<ffi.Void> user_data,
  int timeout,
);

typedef _c_libusb_set_iso_packet_lengths = ffi.Void Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Uint32 length,
);

typedef _dart_libusb_set_iso_packet_lengths = void Function(
  ffi.Pointer<libusb_transfer> transfer,
  int length,
);

typedef _c_libusb_get_iso_packet_buffer = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Uint32 packet,
);

typedef _dart_libusb_get_iso_packet_buffer = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<libusb_transfer> transfer,
  int packet,
);

typedef _c_libusb_get_iso_packet_buffer_simple = ffi.Pointer<ffi.Uint8>
    Function(
  ffi.Pointer<libusb_transfer> transfer,
  ffi.Uint32 packet,
);

typedef _dart_libusb_get_iso_packet_buffer_simple = ffi.Pointer<ffi.Uint8>
    Function(
  ffi.Pointer<libusb_transfer> transfer,
  int packet,
);

typedef _c_libusb_control_transfer = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 request_type,
  ffi.Uint8 bRequest,
  ffi.Uint16 wValue,
  ffi.Uint16 wIndex,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Uint16 wLength,
  ffi.Uint32 timeout,
);

typedef _dart_libusb_control_transfer = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int request_type,
  int bRequest,
  int wValue,
  int wIndex,
  ffi.Pointer<ffi.Uint8> data,
  int wLength,
  int timeout,
);

typedef _c_libusb_bulk_transfer = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 endpoint,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> actual_length,
  ffi.Uint32 timeout,
);

typedef _dart_libusb_bulk_transfer = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int endpoint,
  ffi.Pointer<ffi.Uint8> data,
  int length,
  ffi.Pointer<ffi.Int32> actual_length,
  int timeout,
);

typedef _c_libusb_interrupt_transfer = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 endpoint,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> actual_length,
  ffi.Uint32 timeout,
);

typedef _dart_libusb_interrupt_transfer = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int endpoint,
  ffi.Pointer<ffi.Uint8> data,
  int length,
  ffi.Pointer<ffi.Int32> actual_length,
  int timeout,
);

typedef _c_libusb_get_descriptor = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 desc_type,
  ffi.Uint8 desc_index,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 length,
);

typedef _dart_libusb_get_descriptor = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int desc_type,
  int desc_index,
  ffi.Pointer<ffi.Uint8> data,
  int length,
);

typedef _c_libusb_get_string_descriptor = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 desc_index,
  ffi.Uint16 langid,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 length,
);

typedef _dart_libusb_get_string_descriptor = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int desc_index,
  int langid,
  ffi.Pointer<ffi.Uint8> data,
  int length,
);

typedef _c_libusb_get_string_descriptor_ascii = ffi.Int32 Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  ffi.Uint8 desc_index,
  ffi.Pointer<ffi.Uint8> data,
  ffi.Int32 length,
);

typedef _dart_libusb_get_string_descriptor_ascii = int Function(
  ffi.Pointer<libusb_device_handle> dev_handle,
  int desc_index,
  ffi.Pointer<ffi.Uint8> data,
  int length,
);

typedef _c_libusb_try_lock_events = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_try_lock_events = int Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_lock_events = ffi.Void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_lock_events = void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_unlock_events = ffi.Void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_unlock_events = void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_event_handling_ok = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_event_handling_ok = int Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_event_handler_active = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_event_handler_active = int Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_interrupt_event_handler = ffi.Void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_interrupt_event_handler = void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_lock_event_waiters = ffi.Void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_lock_event_waiters = void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_unlock_event_waiters = ffi.Void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_unlock_event_waiters = void Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_wait_for_event = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<timeval> tv,
);

typedef _dart_libusb_wait_for_event = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<timeval> tv,
);

typedef _c_libusb_handle_events_timeout = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<timeval> tv,
);

typedef _dart_libusb_handle_events_timeout = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<timeval> tv,
);

typedef _c_libusb_handle_events_timeout_completed = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<timeval> tv,
  ffi.Pointer<ffi.Int32> completed,
);

typedef _dart_libusb_handle_events_timeout_completed = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<timeval> tv,
  ffi.Pointer<ffi.Int32> completed,
);

typedef _c_libusb_handle_events = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_handle_events = int Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_handle_events_completed = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<ffi.Int32> completed,
);

typedef _dart_libusb_handle_events_completed = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<ffi.Int32> completed,
);

typedef _c_libusb_handle_events_locked = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<timeval> tv,
);

typedef _dart_libusb_handle_events_locked = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<timeval> tv,
);

typedef _c_libusb_pollfds_handle_timeouts = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_pollfds_handle_timeouts = int Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_get_next_timeout = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<timeval> tv,
);

typedef _dart_libusb_get_next_timeout = int Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<timeval> tv,
);

typedef _c_libusb_get_pollfds = ffi.Pointer<ffi.Pointer<libusb_pollfd>>
    Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _dart_libusb_get_pollfds = ffi.Pointer<ffi.Pointer<libusb_pollfd>>
    Function(
  ffi.Pointer<libusb_context> ctx,
);

typedef _c_libusb_free_pollfds = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<libusb_pollfd>> pollfds,
);

typedef _dart_libusb_free_pollfds = void Function(
  ffi.Pointer<ffi.Pointer<libusb_pollfd>> pollfds,
);

typedef libusb_pollfd_added_cb = ffi.Void Function(
  ffi.Int32,
  ffi.Int16,
  ffi.Pointer<ffi.Void>,
);

typedef libusb_pollfd_removed_cb = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_libusb_set_pollfd_notifiers = ffi.Void Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<ffi.NativeFunction<libusb_pollfd_added_cb>> added_cb,
  ffi.Pointer<ffi.NativeFunction<libusb_pollfd_removed_cb>> removed_cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_libusb_set_pollfd_notifiers = void Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Pointer<ffi.NativeFunction<libusb_pollfd_added_cb>> added_cb,
  ffi.Pointer<ffi.NativeFunction<libusb_pollfd_removed_cb>> removed_cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef libusb_hotplug_callback_fn = ffi.Int32 Function(
  ffi.Pointer<libusb_context>,
  ffi.Pointer<libusb_device>,
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_libusb_hotplug_register_callback = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Int32 events,
  ffi.Int32 flags,
  ffi.Int32 vendor_id,
  ffi.Int32 product_id,
  ffi.Int32 dev_class,
  ffi.Pointer<ffi.NativeFunction<libusb_hotplug_callback_fn>> cb_fn,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Pointer<ffi.Int32> callback_handle,
);

typedef _dart_libusb_hotplug_register_callback = int Function(
  ffi.Pointer<libusb_context> ctx,
  int events,
  int flags,
  int vendor_id,
  int product_id,
  int dev_class,
  ffi.Pointer<ffi.NativeFunction<libusb_hotplug_callback_fn>> cb_fn,
  ffi.Pointer<ffi.Void> user_data,
  ffi.Pointer<ffi.Int32> callback_handle,
);

typedef _c_libusb_hotplug_deregister_callback = ffi.Void Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Int32 callback_handle,
);

typedef _dart_libusb_hotplug_deregister_callback = void Function(
  ffi.Pointer<libusb_context> ctx,
  int callback_handle,
);

typedef _c_libusb_set_option = ffi.Int32 Function(
  ffi.Pointer<libusb_context> ctx,
  ffi.Int32 option,
);

typedef _dart_libusb_set_option = int Function(
  ffi.Pointer<libusb_context> ctx,
  int option,
);
